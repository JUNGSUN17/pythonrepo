{
  
    
        "post0": {
            "title": "파이썬 기초",
            "content": ". 안녕하세요 . NameError Traceback (most recent call last) &lt;ipython-input-1-041a565a82b3&gt; in &lt;module&gt;() -&gt; 1 안녕하세요 NameError: name &#39;안녕하세요&#39; is not defined . print(&quot;안녕&quot;) . 안녕 . a=5 b= 3.14 c=&#39;3.14&#39; d=&quot;3.14&quot; e = -3.14 f=&#39;abcd&#39;+&#39;가나다라&#39; g=&#39;123&#39;*3 print(type(a),type(b),type(c),type(d),type(e),type(f),type(g)) . &lt;class &#39;int&#39;&gt; &lt;class &#39;float&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;float&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;str&#39;&gt; . &#54028;&#51060;&#50028; &#48320;&#49688;&#47749; &#51089;&#49457;&#48277; . 1) 첫 글자 = 영문 혹은 _ (언더바) . 2) 영문자, 숫자, _(언더바)만으로 구성 . 3) 대소문자를 구별해서 사용 . 4) 예약어는 변수명으로 사용 불가 . 1st = &#39;첫번째&#39; . File &#34;&lt;ipython-input-6-447ef88e7929&gt;&#34;, line 2 1st = &#39;첫번째&#39; ^ SyntaxError: invalid syntax . f**t = &#39;첫번째&#39; . File &#34;&lt;ipython-input-5-191f3b30443a&gt;&#34;, line 2 f**t = &#39;첫번째&#39; ^ SyntaxError: can&#39;t assign to operator . f^st = &#39;첫번째&#39; . File &#34;&lt;ipython-input-7-432c288619dd&gt;&#34;, line 2 f^st = &#39;첫번째&#39; ^ SyntaxError: can&#39;t assign to operator . Temp = 1000 print(temp) . NameError Traceback (most recent call last) &lt;ipython-input-8-443e264812be&gt; in &lt;module&gt;() 1 # 변수명 에러 유형 (대소문자 구분) 2 Temp = 1000 -&gt; 3 print(temp) NameError: name &#39;temp&#39; is not defined . print = &#39;출력합니다&#39; print(print) . TypeError Traceback (most recent call last) &lt;ipython-input-9-25dae06f115c&gt; in &lt;module&gt;() 1 # 변수명 에러 유형 (예약어 변수명으로 사용 금지) 2 print = &#39;출력합니다&#39; -&gt; 3 print(print) TypeError: &#39;str&#39; object is not callable . &#48320;&#49688; &#49324;&#50857; . 변수는 변하는 수 . | 계산 결과, 입력값, 출력값에 사용 . | . print(100+200) print(&quot;Hello World!&quot;) print(&#39;안녕&#39;) &#39;부에노스 디아스&#39; . 300 Hello World! 안녕 . &#39;부에노스 디아스&#39; . temp =100 #temp라는 변수를 만들고 temp공간에 100을 넣는다는 의미 temp #temp값을 확인하겠다는 의미. 코랩 외의 환경에서는 print(temp) . 100 . temp2 = 200 print(temp2) . 200 . temp3 = temp+temp2 #temp3에 temp의 값과 temp2의 값을 더한 새로운 값 temp3 . 300 . &#54028;&#51060;&#50028; &#53440;&#51077; &#54869;&#51064; . type() 함수를 사용해 변수의 타입을 확인할 수 있다. . . Types: . 숫자형 (Number) | 문자열 (String) | 참, 거짓 (Boolean) | 리스트 (List) | 튜플 (Tuple) | 딕셔너리 (Dictionary) | 집합형 (Set) | . str4 = &#39;100&#39; type(str4) . str . type(int) . type . &#54028;&#51060;&#50028; &#47532;&#49828;&#53944; . name = &#39;BlockDMask&#39; phone = &#39;010 xxxx xxxx&#39; #띄어쓰기 포함해서 13; 띄어쓰기 없으면 11 address = &#39;korea&#39; print(len(name)) #len() 함수는 매개변수로 들어온 문자열의 길이를 반환한다 print(len(phone)) print(len(address)) . 10 13 5 . list1 = [1,2,3,4,5,6,7,8,9,10] print(list1) . [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] . len(list1) #list1 배열 원소값을 요청 #len은 문자열의 길이도 구할 수 있다 . 10 . list1 = [1,2,3,4,5,6,7,8,9,10] print(list1[0]) #list1배열의 첫번째 원소값을 출력 print(list1[-1]) #list1배열의 마지막 원소값을 출력 #list1배열의 마지막 원소값을 문자열과 함께 출력 print(&#39;list1 배열의 마지막 원소값은&#39; + str(list1[-1]) + &#39;입니다&#39;) . 1 10 list1 배열의 마지막 원소값은10입니다 . list1 = [1,2,3,4,5,6,7,8,9,10] print(list1[0]) print(list1[-1]) print(&#39;list1 배열의 마지막 원소값은&#39;,str(list1[-1]),&#39;입니다&#39;) . 1 10 list1 배열의 마지막 원소값은 10 입니다 . &#49836;&#46972;&#51060;&#49905; . 배열 원소의 일정 부분만 가져오기 . print(list1[2:6]) ## list1배열의 인덱스 2번부터 6번 앞까지의 데이터 출력 요청 . [3, 4, 5, 6] . print(list1[2:]) #list1 배열의 인덱스 2번부터 마지막까지의 데이터 출력 요청 . [3, 4, 5, 6, 7, 8, 9, 10] . print(list1[:6]) ##list1배열의 인덱스 처음부터 인덱스 6번 앞까지의 데이터 출력 요청 . [1, 2, 3, 4, 5, 6] . print(list1[:-1]) #list1 배열의 인덱스 처음부터 마지막 앞까지의 데이터 출력 요청 . [1, 2, 3, 4, 5, 6, 7, 8, 9] . range 사용해서 리스트 만들기 . 리스트 = list(range(횟수)) | 리스트 = list(range(시작,끝)) | 리스트 = list(range(시작,끝,증가폭)) | . list_rg1 = list(range(11)) list_rg2 = list(range(5,12)) list_rg3 = list(range(-4,5,2)) list_rg4 = list(range(20,-1,-1)) list_rg5 = list(&#39;hello world&#39;) print(&quot;list_rg1은&quot;, list_rg1) print(&quot;list_rg2은&quot;, list_rg2) print(&quot;list_rg3은&quot;, list_rg3) print(&quot;list_rg4은&quot;, list_rg4) print(&quot;list_rg5은&quot;, list_rg5) . list_rg1은 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] list_rg2은 [5, 6, 7, 8, 9, 10, 11] list_rg3은 [-4, -2, 0, 2, 4] list_rg4은 [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] list_rg5은 [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] . print(list_rg1) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] . list_rg5 = list(&#39;hello world&#39;) list_rg5[0] = &#39;H&#39; ##인덱스 0 (h) 대문자로 수정 print(&quot;list_rg5은&quot;, list_rg5) . list_rg5은 [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] . list_rg5 = list(&#39;hello world&#39;) list_rg5[0] = &#39;H&#39; del list_rg5[5] print(&quot;list_rg5의 8번째 요소 대문자로 수정&quot;, list_rg5) print(&quot;list_rg5의 5번째 요소 삭제&quot;, list_rg5) . list_rg5의 8번째 요소 대문자로 수정 [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] list_rg5의 5번째 요소 삭제 [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] . del list_rg5[5] print(&quot;list_rg5의 5번째 요소 삭제&quot;, list_rg5) . list_rg5의 5번째 요소 삭제 [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] . &#54028;&#51060;&#50028; &#48152;&#48373;&#47928; . for문 기본 형식 . for x in range(0,3,1): ##(시작값,끝값+1,증가값) print(&#39;안녕하세요 for문을 공부중 입니다&#39;) . 안녕하세요 for문을 공부중 입니다 안녕하세요 for문을 공부중 입니다 안녕하세요 for문을 공부중 입니다 . for x in range(5): print(x) ## 실수했던 곳! tap 무조건 누르기 . 0 1 2 3 4 . for x in range(2,4): print(x) . 2 3 . for x in range(0,10): print(x) . 0 1 2 3 4 5 6 7 8 9 . &#50696;&#51228; . Example: 합계구하기 . 변수는 3개를 사용합니다 (합계 = 0, 범위 시작값 =1, 끝값 = 11). . 시작값에서 끝값-1까지 인덱스 값을 바꾸면서 반복합니다. . 합계값에 인덱스 값을 더합니다. . 반복이 끝나면 ‘-’ 값을 50번 출력합니다. . 합계와 인덱스 값을 출력합니다. . sum = 0 ## 합계 start = 1 ## 시작값 final = 11 ## 끝값 for x in range (start, final): ## 실수!!! 콜론 붙이기 sum+=x ##합계값에 인덱스값을 더합니다 (sum = sum + x) print (&quot;x:&quot;,x,&quot;sum:&quot;,sum) ## 합계와 인덱스 값을 출력합니다 print(&#39;-&#39;*50) ## 반복이 끝나면 &#39;-&#39;값을 50번 출력합니다 print(start, &#39;부터&#39;, final-1, &#39;까지 더한 총합은&#39;, sum,&#39;입니다&#39;) ##final-1인 이유는 &#39;시작값에서 끝값-1까지 인덱스 값을 바꾸면서 반복합니다&#39; 라고 명시되어 있기 떄문 . x: 10 sum: 55 -- 1 부터 10 까지 더한 총합은 55 입니다 . test_sum = 0 a = 1 b = 11 for x in range (a,b): test_sum += x print (&quot;x:&quot;,x,&quot;sum:&quot;,test_sum) print(&#39;-&#39;* 50) print(a,&#39;부터&#39;,b-1,&#39;까지 더한 총합은&#39;,test_sum, &#39;입니다&#39;) . x: 10 sum: 55 -- 1 부터 10 까지 더한 총합은 55 입니다 . &#54028;&#51060;&#50028; &#51312;&#44148;&#47928; . if &amp; else . a = 200 if a &lt; 100: print(&quot;100보다 작군요&quot;) else: print(&quot;100보다 크군요&quot;) . 100보다 크군요 . import random . 무작위 수를 발생시키는 모듈 . import random for x in range(3): test_num1 = random.randint(1,15) if test_num1 &gt; 10: print(test_num1 , &#39;은 10보다 큽니다&#39;) else: print(test_num1 , &#39;은 10보다 작거나 같습니다&#39;) . 14 은 10보다 큽니다 11 은 10보다 큽니다 10 은 10보다 작거나 같습니다 . import random L = [&quot;열&quot;, &quot;수&quot;, &quot;이&quot;, &quot;선&quot;, &quot;기&quot;, &quot;정&quot;, &quot;희&quot;] x = random.randint(0,6) print(L[x],&#39;는/은 발표를 합니다&#39;) . 희 는/은 발표를 합니다 . import random list = [&quot;선&quot;, &quot;희&quot;, &quot;열&quot;, &quot;이&quot;, &quot;수&quot;, &quot;정&quot;, &quot;기&quot;] random_num = random.randint(0,6) print(list[random_num],&quot;는 발표자입니다&quot;) . 희 는 발표자입니다 . import random list_DT = [&quot;종엽&quot;,&quot;지순&quot;,&quot;승아&quot;,&quot;윤희&quot;,&quot;동빈&quot;,&quot;유진&quot;,&quot;찬민&quot;] rand_num = random.randint(0,6) print(&quot;발표자는 &quot;+list_DT[rand_num]+&quot;입니다&quot;) . 발표자는 종엽입니다 . import random list=[&#39;강다솔&#39;, &#39;김보연&#39;, &#39;남지인&#39;, &#39;유승한&#39;, &#39;윤혜선&#39;, &#39;이예빈&#39;] x=random.randint(0, len(list)-1) print(list[x]) . 유승한 . from random import sample list_member=[&#39;Alex&#39;,&#39;Sophie&#39;,&#39;Annie&#39;,&#39;Zoey&#39;,&#39;Sunny&#39;,&#39;Paul&#39;] print(&#39;발표자는&#39;, sample(list_member,2),&#39;입니다&#39;) . 발표자는 [&#39;Annie&#39;, &#39;Alex&#39;] 입니다 .",
            "url": "https://jungsun17.github.io/pythonrepo/2021/06/06/_05_24_5%ED%8C%80_%EB%B0%95%EC%A0%95%EC%84%A0.html",
            "relUrl": "/2021/06/06/_05_24_5%ED%8C%80_%EB%B0%95%EC%A0%95%EC%84%A0.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jungsun17.github.io/pythonrepo/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jungsun17.github.io/pythonrepo/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jungsun17.github.io/pythonrepo/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jungsun17.github.io/pythonrepo/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}