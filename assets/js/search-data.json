{
  
    
        "post0": {
            "title": "모듈과 패키지",
            "content": ". &#47784;&#46280;&#47564;&#46308;&#44592; . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . % cd /content/drive/MyDrive/Colab Notebooks . import 모듈명 as 함수 . 별칭.함수명() . import mycalc p = mycalc.get_plus(2,2) m = mycalc.get_plus(3,2) print(p,m) . import mycalc as kk p = kk.get_plus(2,2) m = kk.get_minus(3,2) print(p,m) . from 모듈명 import 함수명 . from mycalc import get_plus p = get_plus(2,2) m = cal.get_minus(3,2) print(p,m) . from mycalc import get_plus,get_minus p = get_plus(2,2) m = get_minus(3,2) print(p,m) . from 모듈명 import (*) . from mycalc import * p = get_plus(2,2) m = get_minus(3,2) print(p,m) . &#54056;&#53412;&#51648; . 패키지(Packages)는 도트(.)를 사용하여 파이썬 모듈을 계층적(디렉터리 구조)으로 관리할 수 있게 해줍니다. . &#53364;&#47000;&#49828; . &#53364;&#47000;&#49828;&#51032; &#49324;&#50857; . result1 = 0 result2 = 0 def add1(num): global result1 result1 += num return result1 def add2(num): global result2 result2 += num return result2 print(add1(3)) print(add1(4)) print(add2(3)) print(add2(7)) . class Calculator: def __init__(self): self.result = 0 def add(self, num): self.result += num return self.result cal1 = Calculator() cal2 = Calculator() cal3 = Calculator() print(cal1.add(3)) print(cal1.add(4)) print(cal2.add(3)) print(cal2.add(7)) print(cal3.add(2)) print(cal3.add(5)) . class Calculator: def __init__(self): self.result = 0 def add(self, num): self.result += num return self.result def sub(self, num): self.result -= num return self.result cal1 = Calculator() cal2 = Calculator() cal3 = Calculator() print(cal1.add(3)) print(cal2.add(4)) print(cal3.sub(3)) print(cal3.sub(3)) . &#51088;&#46041;&#52264; &#53364;&#47000;&#49828; &#47564;&#46308;&#44592; . class Car: brand = &#39;&#39; model = &#39;&#39; color = &#39;&#39; def turn_on(self): print(&#39;시동을 겁니다&#39;) def turn_off(self): print(&#39;시동을 끕니다&#39;) def drive(self): print(&#39;주행중입니다&#39;) . car1 = Car() car2 = Car() #car1 - 흰색 BMT 3 car1.brand = &#39;BMW&#39; car1.model = &#39;3&#39; car1.color = &#39;white&#39; #car2 - 블랙 audi A5 car2.brand = &#39;audi&#39; car2.model = &#39;A5&#39; car2.color = &#39;black&#39; . car1.turn_on() car1.turn_off() car1.drive() car2.turn_on() . &#44061;&#52404;&#47484; &#49373;&#49457;&#49884; &#49549;&#49457; &#52488;&#44592;&#54868; . init : 클라스의 객체가 만들어질 때 자동 호출, 객체가 갖게 될 여러 성질을 정해준다 . | 밑줄 두개가 붙은 메서드: 파이썬이 자동으로 호출해주는 메서드 . | 스페셜 메서드 혹은 매직 메서드로 불린다 (예: del ) . | . class Car: def __init__(self,brand,model,color): self.brand = brand self.model = model self.color = color print(brand,model,color,&#39;생성&#39;) def turn_on(self): print(&#39;시동을 겁니다&#39;) def turn_off(self): print(&#39;시동을 끕니다&#39;) def drive(self): print(&#39;주행중입니다&#39;) . car1 = Car(&#39;BMT&#39;,&#39;3&#39;,&#39;white&#39;) car2 = Car(&#39;audi&#39;,&#39;A5&#39;,&#39;black&#39;) . &#47588;&#49548;&#46300;&#50640;&#49436; &#49549;&#49457; &#49324;&#50857;&#54616;&#44592; . class Car: def __init__(self,brand,model,color): self.brand = brand self.model = model self.color = color print(brand,model,color,&#39;생성&#39;) def turn_on(self): print(f&#39;{self.brand} {self.model} 시동을 겁니다&#39;) def turn_off(self): print(f&#39;{self.brand} {self.model} 시동을 끕니다&#39;) def drive(self): print(f&#39;{self.brand} {self.model} 주행중입니다&#39;) . car1 = Car(&#39;BMT&#39;,&#39;3&#39;,&#39;white&#39;) car2 = Car(&#39;audi&#39;,&#39;A5&#39;,&#39;black&#39;) # car1,car2 기능 수행 car1.turn_on() car1.drive() car1.turn_off() car2.turn_on() car2.drive() car2.turn_off() . &#50696;&#51228; . class Person: def __init__(self,name,age,address): self.hello = &#39;안녕하세요&#39; self.name = name self.age = age self.address = address def greeting(self): print(f&#39;{self.hello}, 저는 {self.name} 입니다.&#39;) p1 = Person(&#39;박땡땡&#39;,24,&#39;서울&#39;) p2 = Person(&#39;이모씨&#39;,10,&#39;대전&#39;) p1.greeting() p2.greeting() print(&#39;이름: &#39;,p1.name) print(&#39;나이: &#39;,p1.age) print(&#39;주소: &#39;,p1.address) . class Book: def __init__(self, bookName): self.name = bookName print(&quot;객체가 생성되었습니다. 책의 이름은 &quot; + bookName + &quot;입니다.&quot;) def __del__(self): print(self.name + &quot; 객체가 소멸합니다.&quot;) book1 = Book(&quot;DT 파이썬&quot;) del book1 . &#51452;&#49324;&#50948; &#44172;&#51076; . import random # 초기 변수값 - 내 주사위 위치, 컴퓨터 주사위 위치 # 주사위말 함수 - 30까지 주사위 위치 표현 # 시작시 출력화면 구성 - 게임 스타트 while True: input(&quot;Enter를 누르면 당신의 말이 움직인다&quot;) # 내 주사위수 계산 ,승패 체크 input(&quot;Enter를 누르면 컴퓨터의 말이 움직인다&quot;) # 컴퓨터 주사위 수 계산,승패 체크 . import random pl_pos = 1 com_pos = 1 def board(): print(&quot;-&quot; * (pl_pos - 1) + &quot;Ｐ&quot; + &quot;-&quot; * (30 - pl_pos) + &quot;Goal&quot;) print(&quot;-&quot; * (com_pos - 1) + &quot;Ｃ&quot; + &quot;-&quot; * (30 - com_pos) + &quot;Goal&quot;) board() print(&quot;주사위 게임, 스타트!&quot;) . import random pl_pos = 1 com_pos = 1 def board(): print(&quot;-&quot; * (pl_pos - 1) + &quot;Ｐ&quot; + &quot;-&quot; * (30 - pl_pos) + &quot;Goal&quot;) print(&quot;-&quot; * (com_pos - 1) + &quot;Ｃ&quot; + &quot;-&quot; * (30 - com_pos) + &quot;Goal&quot;) board() print(&quot;주사위 게임, 시이이이이~작!&quot;) while True: input(&quot;Enter를 누르면 당신의 말이 움직인다&quot;) pl_pos = pl_pos + random.randint(1, 6) if pl_pos==random.randint(1,30): pl_pos=1 print(&#39;초기화 됩니다.&#39;) if pl_pos &gt; 30: pl_pos = 30 board() if pl_pos == 30: print(&quot;유후, 당신의 승리^^&quot;) break if pl_pos==5: pl_pos=1 print(&#39;초기화 됩니다.&#39;) input(&quot;Enter를 누르면 컴퓨터의 말이 움직인다&quot;) com_pos = com_pos + random.randint(1, 6) if pl_pos==random.randint(1,30): pl_pos=1 print(&#39;초기화 됩니다.&#39;) if com_pos &gt; 30: com_pos = 30 board() if com_pos == 30: print(&quot;역시나, 컴퓨터의 승리^^&quot;) break if pl_pos==5: pl_pos=1 print(&#39;초기화 됩니다.&#39;) .",
            "url": "https://jungsun17.github.io/pythonrepo/2021/06/07/_06_08_5%ED%8C%80_%EB%B0%95%EC%A0%95%EC%84%A0.html",
            "relUrl": "/2021/06/07/_06_08_5%ED%8C%80_%EB%B0%95%EC%A0%95%EC%84%A0.html",
            "date": " • Jun 7, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "딕셔너리 & 팀 실습",
            "content": ". &#46357;&#49492;&#45320;&#47532; &#44050; &#44032;&#51256;&#50724;&#44592; . alist = { &#39;키1&#39;:[&#39;값1&#39;, &#39;값2&#39;], &#39;키2&#39;:[&#39;값3&#39;, &#39;값4&#39;], &#39;키3&#39;:[&#39;값5&#39;, &#39;값6&#39;], &#39;키4&#39;:{&#39;키&#39;:100}} print(list(alist[&#39;키1&#39;])) print(alist[&#39;키4&#39;][&#39;키&#39;]) . [&#39;값1&#39;, &#39;값2&#39;] 100 . &#50696;&#51228;1: &#54016; &#50672;&#47161; &#44396;&#54616;&#44592; . alist = { &#39;1팀&#39;:[25,39,29,27,22], &#39;2팀&#39;:[27,24,25,29,25], &#39;3팀&#39;:[25,26,25,23,23,28,27], &#39;4팀&#39;:[21,23,30], &#39;5팀&#39;:[26,41,24,31,21,34,27], &#39;6팀&#39;:[21,29,27,25,25]} age_li = [] for i,v in alist.items(): print(f&#39;{i}의 최저연령은{min(v)} 최고연령은 {max(v)}&#39;) age_li.extend(v) # print(age_li) print(f&#39;DT스쿨 최저연령은{min(age_li)} 최고연령은 {max(age_li)}&#39;) . 1팀의 최저연령은22 최고연령은 39 2팀의 최저연령은24 최고연령은 29 3팀의 최저연령은23 최고연령은 28 4팀의 최저연령은21 최고연령은 30 5팀의 최저연령은21 최고연령은 41 6팀의 최저연령은21 최고연령은 29 DT스쿨 최저연령은21 최고연령은 41 . alist = { &#39;1팀&#39;:[25,39,29,27,22], &#39;2팀&#39;:[27,24,25,29,25], &#39;3팀&#39;:[25,26,25,23,23,28,27], &#39;4팀&#39;:[21,23,30], &#39;5팀&#39;:[26,41,24,31,21,34,27], &#39;6팀&#39;:[21,29,27,25,25]} age_li = [] for i,v in alist.items(): print(f&#39;{i}의 최저연령은{min(v)} 최고연령은 {max(v)}&#39;) age_li.extend(v) print(f&#39;DT스쿨 평균연령은 {sum(age_li)/len(age_li)}입니다.&#39;) . 1팀의 최저연령은22 최고연령은 39 2팀의 최저연령은24 최고연령은 29 3팀의 최저연령은23 최고연령은 28 4팀의 최저연령은21 최고연령은 30 5팀의 최저연령은21 최고연령은 41 6팀의 최저연령은21 최고연령은 29 DT스쿨 평균연령은 26.6875입니다. . &#50696;&#51228; 2: &#52880;&#47533;&#53552; &#49324;&#51204; &#47564;&#46308;&#44592; . team_dic = {&#39;갓디&#39;:[&#39;신동열&#39;,&#39;자전거&#39;,&#39;돈까스&#39;,&#39;아이슬란드&#39;], &#39;너구리&#39;:[&#39;이영이&#39;,&#39;잠&#39;,&#39;양파,감자&#39;,&#39;뉴욕&#39;], &#39;매운오돌뼈&#39;:[&#39;박정선&#39;,&#39;책 읽기&#39;,&#39;쫄면&#39;,&#39;크로아티아&#39;], &#39;수루키&#39;:[&#39;한슬기&#39;,&#39;댄스&#39;,&#39;곱창&#39;,&#39;발리&#39;], &#39;뚜뚜&#39;:[&#39;김은수&#39;,&#39;노래듣기&#39;,&#39;떡볶이&#39;,&#39;유럽&#39;], &#39;데이지&#39;:[&#39;노현정&#39;,&#39;유튜브보기&#39;,&#39;매번달라짐&#39;,&#39;이스탄불&#39;], &#39;희&#39;:[&#39;박제희&#39;,&#39;취미&#39;,&#39;좋아하는 음식&#39;,&#39;여행가고 싶은 곳&#39;], } # 별명이 뭐가 들어있는지 먼저 보여주면 좋지 않을까 편의점 리스트 처럼 nick_name = input(&#39;누가 궁금한가요? : &#39;) #if nick_name != team_dic : #print(&#39;우리 팀원이 아니에요&#39;) b_list = team_dic[nick_name] print(f&#39;오월의 오팀 {nick_name}님을 소개합니다.&#39;) print(f&#39;{nick_name}님의 이름은 {b_list[0]}.&#39;) print(f&#39;취미는 {b_list[1]}!&#39;) print(f&#39;{nick_name}님이 좋아하는 음식은 {b_list[2]}이고,&#39;) print(f&#39;여행가고 싶은 곳은 {b_list[3]}라고 합니다.&#39;) . 누가 궁금한가요? : 매운오돌뼈 오월의 오팀 매운오돌뼈님을 소개합니다. 매운오돌뼈님의 이름은 박정선. 취미는 책 읽기! 매운오돌뼈님이 좋아하는 음식은 쫄면이고, 여행가고 싶은 곳은 크로아티아라고 합니다. . &#54016;&#44284;&#51228;] &#50864;&#47532; &#54016;&#51032; &#54217;&#44512; &#45208;&#51060;&#45716;? . 네이버 오픈 API - https://developers.naver.com/docs/common/openapiguide/ . 이미지캡쳐 예시 코드 - https://developers.naver.com/docs/utils/captcha/examples/#python . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Mounted at /content/drive . import os import sys import requests # 등록된 client_id, client_secret 정보를 입력합니다. client_id = &quot;yBwPM0bgoQTE7MzqhxmM&quot; client_secret = &quot;2HiUBFvSq_&quot; # 얼굴 사진을 통한 나이 추정을 위해서는 아래 url을 사용합니다. (face: 얼굴 분석, celebrity: 닮은 유명인 찾기) #url = &quot;https://openapi.naver.com/v1/vision/face&quot; url = &quot;https://openapi.naver.com/v1/vision/celebrity&quot; # 분석할 이미지의 파일명을 입력합니다./ files = {&#39;image&#39;: open(&#39;/content/drive/MyDrive/5x7.jpg&#39;, &#39;rb&#39;)} # API 입력 설정 headers = {&#39;X-Naver-Client-Id&#39;: client_id, &#39;X-Naver-Client-Secret&#39;: client_secret } # API 사용 response = requests.post(url, files=files, headers=headers) rescode = response.status_code if (rescode==200): # 결과물 출력 print (response.text) else: print(&quot;Error Code:&quot; + str(rescode)) . {&#34;info&#34;:{&#34;size&#34;:{&#34;width&#34;:591,&#34;height&#34;:827},&#34;faceCount&#34;:1},&#34;faces&#34;:[{&#34;celebrity&#34;:{&#34;value&#34;:&#34;신소율&#34;,&#34;confidence&#34;:0.456029}}]} . import json # loads 함수를 사용하여 json으로 변환합니다. result = json.loads(response.text) result . {&#39;faces&#39;: [{&#39;age&#39;: {&#39;confidence&#39;: 0.704142, &#39;value&#39;: &#39;23~27&#39;}, &#39;emotion&#39;: {&#39;confidence&#39;: 0.844172, &#39;value&#39;: &#39;neutral&#39;}, &#39;gender&#39;: {&#39;confidence&#39;: 0.999726, &#39;value&#39;: &#39;female&#39;}, &#39;landmark&#39;: {&#39;leftEye&#39;: {&#39;x&#39;: 239, &#39;y&#39;: 284}, &#39;leftMouth&#39;: {&#39;x&#39;: 242, &#39;y&#39;: 402}, &#39;nose&#39;: {&#39;x&#39;: 292, &#39;y&#39;: 360}, &#39;rightEye&#39;: {&#39;x&#39;: 351, &#39;y&#39;: 283}, &#39;rightMouth&#39;: {&#39;x&#39;: 348, &#39;y&#39;: 403}}, &#39;pose&#39;: {&#39;confidence&#39;: 0.998617, &#39;value&#39;: &#39;frontal_face&#39;}, &#39;roi&#39;: {&#39;height&#39;: 261, &#39;width&#39;: 261, &#39;x&#39;: 171, &#39;y&#39;: 224}}], &#39;info&#39;: {&#39;faceCount&#39;: 1, &#39;size&#39;: {&#39;height&#39;: 827, &#39;width&#39;: 591}}} . &#50864;&#47532; &#54016;&#51032; &#54217;&#44512; &#45208;&#51060; &#44208;&#44284; . team_may = {&#39;한슬기&#39;:[&#39;20~24&#39;,&#39;1.0&#39;,&#39;에리카&#39;], &#39;신동열&#39;:[&#39;16~20&#39;,&#39;0.469707&#39;,&#39;윤시윤&#39;], &#39;이영이&#39;:[&#39;27~31&#39;,&#39; 0.788085&#39;,&#39;예인&#39;], &#39;박정선&#39;:[&#39;18~22&#39;,&#39;0.0871416&#39;,&#39;윤혜경&#39;], &#39;김은수&#39;:[&#39;17~21&#39;,&#39;1.0&#39;,&#39;김소현&#39;], &#39;노현정&#39;:[&#39;28~32&#39;,&#39;1.0&#39;, &#39;문지인&#39;], &#39;박제희&#39;:[&#39;17~21&#39;,&#39;0.472284&#39;,&#39;강승현&#39;]} nick_name = input(&#39;누가 궁금한가요? : &#39;) b_list = team_may[nick_name] print(f&#39;오월의 오팀 {nick_name}님의 평균나이는 {b_list[0]}이며, 정확도는 {b_list[1]}&#39;) print(f&#39;{nick_name}님의 닮은꼴 연예인은? : {b_list[2]} &#39;) . 누가 궁금한가요? : 박정선 오월의 오팀 박정선님의 평균나이는 18~22이며, 정확도는 0.0871416 박정선님의 닮은꼴 연예인은? : 윤혜경 . confidence = [0.0871416, 0.828125, 0.704142] age = [20, 23, 25] ave_age = sum(age)/len(age) tot_conf = sum(confidence)/len(confidence) print(ave_age, tot_conf) . 22.666666666666668 0.5398028666666667 . alist = [23.2,26.25,21.6,22.7,19.6] blist = [0.85,0.64,0.83,0.84,0.54,0.69,0.91] print(f&#39;5팀의 평균 연령은 {round(sum(alist)/len(alist),1)}입니다&#39;) print(f&#39;5팀의 평균 정확도는 {sum(blist)/len(blist)} 입니다&#39;) . 5팀의 평균 연령은 22.7입니다 5팀의 평균 정확도는 0.7571428571428571 입니다 .",
            "url": "https://jungsun17.github.io/pythonrepo/2021/06/07/_06_03_5%ED%8C%80_%EB%B0%95%EC%A0%95%EC%84%A0.html",
            "relUrl": "/2021/06/07/_06_03_5%ED%8C%80_%EB%B0%95%EC%A0%95%EC%84%A0.html",
            "date": " • Jun 7, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "함수",
            "content": ". &#45236;&#51109;&#54632;&#49688; . 내장함수들은 모듈을 import할 필요없이 사용 . dir(__builtins__) . &#50808;&#51109;&#54632;&#49688; . import하여 사용, 모듈 뒤에 점(.)을 찍어 사용 . import &#47784;&#46280; &#44032;&#51256; &#50724;&#44592; . 파이썬에서는 다양한 분야의 처리를 위한 기능을 제공합니다. . 모듈 import 방법 . import 모듈명 # 모듈 불러오기 import 모듈명 as 별칭 # 별칭으로 모듈 불러오기 from 패키지명 import 모듈명 # 원하는 모듈만 특정해서 불러오기 from 모듈명 import 함수명 # 원하는 함수만 특정해서 불러오기 . 캘린더 기능 month(): 함수에 인수로 년,월을 입력하여 호출하면 캘린더 데이터(문자열)반환 isleap(): 함수에 인수로 년도를 입력하면 bol을 반환 | import random list_data = [1,2,3,4,5] random.choice(list_data) . import calendar # calendar 모듈 import print(calendar.month(2021,5)) # 달력 년월을 지정 출력 . from calendar import month print(month(2021,5)) . 경과한 날짜 수 확인 임의의 날짜에서 다른 임의의 날짜까지의 경과일 계산 | . import datetime date1 = datetime.date.today() date2 = datetime.date(1998,10,17) print(date1-date2) . import random #None 조심 #시퀀스 데이터를 무작위로 랜덤하게 섞기 a = [&#39;호호&#39;, &#39;하하&#39;, &#39;히히&#39;, &#39;킥킥&#39;, &#39;캭캭&#39;] random.shuffle(a) print(a) #0과 1사이의 실수 반환 b = random.random() #사직과 끝값 사이의 랜덤한 정수 선택 c = random.randint(1,10) #함수로 만들어지는 정수 중에 하나를 랜덤하게 선택 d = random.randrange(0,101,2) # 시퀀스 데이터 내에서 무작위로 하나의 원소 선택 e = random.choice(&#39;abcdefg&#39;) print(b, c, d, e) . import random a = random.random() # Random float x, 0.0 &lt;= x &lt; 1.0 #2개의 숫자 사이의 랜덤 실수를 리턴합니다. b = random.uniform(1, 10) # Random float x, 1.0 &lt;= x &lt; 10.0 #2개의 숫자 사이의 랜덤 정수를 리턴합니다. (2번째 인자로 넘어온 정수도 범위에 포함시킴) c =random.randint(1, 10) # Integer from 1 to 10, endpoints included #range(start, stop, step) 함수로 만들어지는 정수 중에 하나를 랜덤하게 리턴합니다. d=random.randrange(0, 101, 2) # Even integer from 0 to 100 #choice() 함수 랜덤하게 하나의 원소를 선택합니다. e = random.choice(&#39;abcdefghij&#39;) # Choose a random element f = random.choice([&#39;가위&#39;,&#39;바위&#39;,&#39;보&#39;]) print(a,b,c,d,e,f) . &#54632;&#49688;&#51221;&#51032; . &#54028;&#51060;&#50028;&#50640;&#49436; &#54632;&#49688; &#44396;&#54788; . 함수 정의 키워드 def() def 함수명(매개변수); 함수가 수행할 일 return 함수가 반환할 객체 . | . 예제1: 환영에시지 출력하기 . 환영메시지를 출력하는 함수를 만들고, 함수를 호출하여 출력 . def say_hello(): print(&#39;안녕하세요!!&#39;) print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) print(&#39;즐거운 시간 되세요!!&#39;) say_hello() . #매개변수 1개, 반환값 없음 def say_hello(name): print(f&#39;안녕하세요, {name}!!&#39;) print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) print(&#39;즐거운 시간 되세요!!&#39;) say_hello(&#39;홍길동&#39;) . #매개변수 2개, 반환값 없음 def say_hello(name1, name2): print(f&#39;안녕하세요, {name1}, {name2}!!&#39;) print(&#39;파이썬의 세계에 오신 것을 환영합니다.&#39;) print(&#39;즐거운 시간 되세요!!&#39;) say_hello(&#39;홍길동&#39;, &#39;홍홍홍&#39;) . 예제2: 원의 넓이를 구하는 함수 만들기 . 원의 반지름을 보내면 원의 넓이를 계산하여 반환하는 함수 작성 . #매개변수 1개, 반환값 1개 def circle_area(radius): area = 3.14 * radius ** 2 return area circle_area(5) . #매개변수 2개, 반환값 2개 def circle_area_circum(radius1, radius2): area = 3.14 * radius1 ** 2 circum = 2 * 3.14 * radius2 return area, circum circle_area_circum(3,3) . 예제3: 두 수를 더하여 결과를 반환하는 점수 만들기 . 두 수를 매개변수로 받아 더한 값을 반환하는 함수 만들기 . def get_plus(num1,num2): result = num1 + num2 return result get_plus(1,2) . #매개변수 2개, 반환값 2개 def get_plus_minus(num1,num2): plus = num1 + num2 minus = num1 - num2 return plus,minus get_plus_minus(1,2) . #매개변수 2개, 반환값 1개 def get_divi(numb1,numb2): if numb2 == 0: print(&#39;Impossible&#39;) else: divi = numb1/numb2 return divi x = random.randint(0,10) y = random.randint(0,10) print(x,y) get_divi(x,y) . &#51648;&#50669;&#48320;&#49688; . 함수 내에서 생성한 변수 | . &#51204;&#50669;&#48320;&#49688; . 함수 밖에서 생성한 변수 | . def get_plus_minus(num1,num2): plus = num1 + num2 minus = num1 - num2 return plus,minus # get_plus_minus(1,2) print(plus,minus) . def circle_area(): area = 3.14 * radius ** 2 return area radius = float(input(&#39;반지름:&#39;)) circle_area() . &#54632;&#49688; &#50504;&#50640;&#49436; &#51204;&#50669;&#48320;&#49688; &#48320;&#44221; . 함수 안에서 전역변수의 값을 변경하려면, global 키워드를 사용해야 한다. | . def circle_area(): area = 3.14 * radius ** 2 return area area = 0 #변수 초기값 사용 radius = float(input(&#39;반지름:&#39;)) print(&#39;원의 넓이:&#39;,circle_area()) print(area) #변경안됨 . def circle_area(): global area area = 3.14 * radius ** 2 return area area = 0 #변수 초기값 사용 radius = float(input(&#39;반지름:&#39;)) print(&#39;원의 넓이:&#39;,circle_area()) print(area) #변경 . def circle_circum(): global circum circum = 2 * 3.14 * radius return circum circum = 0 radius = float(random.randint(1,11)) print(&#39;원의 둘레:&#39;, circle_circum()) print(circum) . &#46356;&#54260;&#53944; &#51064;&#49688; . 매개변수의 개수와 인수의 개수가 다르면 에러 발생 | . def greet(name,msg): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;철수&#39;,&#39;좋은 아침이야&#39;) . def greet(name,msg): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;철수&#39;) . def greet(name=&#39;친구&#39;,msg=&#39;잘 지내니?&#39;): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;영희&#39;,&#39;오랜만이야&#39;) . def greet(name=&#39;친구&#39;,msg=&#39;잘 지내니?&#39;): print(f&#39;안녕 {name},{msg}&#39;) greet(&#39;영희&#39;) . def greet(name=&#39;친구&#39;,msg=&#39;잘 지내니?&#39;): print(f&#39;안녕 {name},{msg}&#39;) greet() . def ask(name=&#39;까치&#39;,ques=&#39;어디 가?&#39;): print(f&#39;야야! {name},{ques}&#39;) ask() . &#53412;&#50892;&#46300; &#51064;&#49688; . 위치 인수와 키워드 인수를 혼합하여 사용할 수 있지만, 위치 인수를 먼저 사용해야 함 | . def calc(x,y,z): result = x,y,z return result calc(1,z=5,y=3) . def calc(x,y,z): result = x,y,z return result calc(x=1,z=5,y=3) . def calc(x,y,z): result = x,y,z return result calc(x=1,5,y=3) . def calc(x,y,z): result = x+y-z return result calc(x=1,5,3) . def print_numb(x,y,z): result = int((x+y)/z) return result x = random.randint(0,10) y = random.randint(0,10) z = random.randint(0,10) print_numb(x,y,z) . def print_descrip(g, c, n): print(g, &quot;학년&quot;, c, &quot;반&quot;, n, &quot;번&quot;) return descrip print_descrip(1, 6, 24) print_descrip(2, c = 4, n = 6) . &#47588;&#44060;&#48320;&#49688; *args . #arg는 튜플 데이터 def average(*args): avrg1 = sum(args) /len(args) return avrg1 print(average(1,2,3)) #인수 3개 print(average(1,2,3,4,5)) #인수 5개 . def average(*a): avrg1 = sum(a) /len(a) return avrg1 print(average(1,2,3)) print(average(1,2,3,4,5)) . def num(*args): outcome = 0 for i in args: outcome+=i return outcome x = num(1,2,3,4,5) print(x) . def char(*args): return args c = char(&#39;짱구&#39;, &#39;둘리&#39;, &#39;GoodFriend&#39;) print(c) . 예제: 소수 여부 판단하기 . 키보드로 입력된 수가 소수인지 아닌지 판별 . 소수: 1과 자기자신만으로만 나누어 떨어지는 1보다 큰 양의 정수 | . def is_prime(numb): if numb &lt; 2: return False for i in range(2,numb): if numb % i == 0: return False return True input_numb = int(input(&#39;숫자 입력:&#39;)) if is_prime(input_numb): print(&#39;소수입니다&#39;) else: print(&#39;소수가 아닙니다&#39;) . def check_even(no): if no % 2 == 0: return True else: return False input_no = int(input(&#39;숫자 입력:&#39;)) if input_no == 0: print(&#39;Unknown&#39;) elif check_even(input_no): print(&#39;짝수입니다&#39;) else: print(&#39;홀수입니다&#39;) . 예제: 오늘의 메뉴 . 오늘의 급식메뉴를 출력하는 프로그램 만들기. . 몇 개의 메뉴가 선택될 지 모른다. . 오늘의 메뉴를 출력하는 부분을 함수로 만들어 프로그램 작성. . def today_menu(*menu): for i in menu: print(i) print(&quot;== 오늘의 메뉴 ==&quot;) today_menu(&#39;김밥&#39;, &#39;떡볶이&#39;,&#39;어묵&#39;,&#39;냉면&#39;,&#39;쫄면&#39;,&#39;닭발&#39;,&#39;매운오돌뼈&#39;) . def today_menu(*menu): for i in menu: print(i) print(&#39;===오늘의 메뉴===&#39;) today_menu(&#39;김밥&#39;,&#39;떡볶이&#39;,&#39;오뎅&#39;) . def today_menu(*menu): for i in range(len(menu)): print(menu[i]) print(&quot;== 오늘의 메뉴 ==&quot;) today_menu(&#39;김밥&#39;,&#39;떡볶이&#39;,&#39;어묵&#39;) . lambda &#54632;&#49688; . 한 줄로 간단하게 만들어 주는 함수 . def plus(num1,num2): result = num1+num2 return result print(plus(10,20)) . plus = lambda num1,num2: num1+num2 print(plus(10,20)) . map &#54632;&#49688; . mylist = [1,2,3,4,5] mylist = list(map(lambda num: num+10, mylist)) print(mylist) . mylist = (1,2,3,4,5) mylist = set(map(lambda num: num+10, mylist)) print(mylist) . &#51116;&#44480;&#54632;&#49688; . 함수 안에서 함수 자기자신을 호출하는 방식 . | 재귀호출은 일반적인 상황에서는 잘 사용하지 않지만 알고리즘을 구현할 때 유용 . | . def hello(count): if count == 0: #종료 조건을 만듦, count가 0이면 다시 hello 함수를 호출하지 않고 끝냄 return print(&#39;Hello, world!&#39;, count) count -= 1 #count 1 감소시킨 뒤 hello(count) #다시 hello에 넣음 hello(5) . 예제 . def factorial(n): if n == 1: #n이 1일 때 return 1 #1을 반환하고 재귀호출을 끝냄 return n * factorial(n-1) #n과 factorial 함수에 n-1을 넣어서 반환한 값을 곱함 print(factorial(5)) . &#50696;&#51228;: &#54200;&#51032;&#51216; &#51116;&#44256; &#44288;&#47532; &#49884;&#49828;&#53596; . 초기재고: 삼각김밥 10개, 커피우유 10개 | . #재고 등록,판매,확인 함수를 추가하도록 합니다 while True: print(&#39; ===================재고관리 시스템 ====================== &#39;) print(&#39; 1: 재고등록 2: 제품판매 4:재고 확인 0: 프로그램 종료 &#39;) menu = input(&#39;메뉴를 입력하세요:&#39;) if menu == &#39;0&#39;: #문자열 break . inventory = {&#39;삼각김밥&#39;:10,&#39;커피우유&#39;:10} #초기재고 def add_product(): while True: product = input(&#39;상품명:&#39;) if product == &#39;&#39;: break num = int(input(&#39;갯수:&#39;)) if product in inventory.keys(): inventory[product] += num else: inventory[product] = num print(&#39;-&#39;*50) for key,value in inventory.items(): print(key,&#39;:&#39;,value) add_product() . def sel_product(): while True: product = input(&#39;상품명:&#39;) if product == &#39;&#39;: break num = int(input(&#39;갯수:&#39;)) if inventory[product] &lt; num: print(&#39;재고가 부족합니다&#39;) else: inventory[product] -= num print(inventory[product],&#39;개 남았습니다&#39;) sel_product() . def search_product(): while True: product = input(&#39;상품명:&#39;) if product == &#39;&#39;: break print(inventory.get(product,&#39;등록되지 않은 상품&#39;)) search_product() . while True: print(&#39; ===================재고관리 시스템 ====================== &#39;) print(&#39; 1: 재고등록 2: 제품판매 4:재고 확인 0: 프로그램 종료 &#39;) menu = input(&#39;메뉴를 입력하세요:&#39;) if menu == &#39;0&#39;: #문자열 break elif menu == &#39;1&#39;: add_product() elif menu == &#39;2&#39;: sel_product() elif menu == &#39;3&#39;: search_product() . # 재고 등록 def add_product(): while True: product = input(&#39;상품명:&#39;) if product == &#39;&#39;: break num = int(input(&#39;갯수:&#39;)) if product in inventory.keys(): inventory[product] += num else: inventory[product] = num print(&#39;-&#39;*50) for key,value in inventory.items(): print(key,&#39;:&#39;,value) # 제품 판매 def sel_product(): while True: product = input(&#39;상품명:&#39;) if product == &#39;&#39;: break num = int(input(&#39;갯수:&#39;)) if inventory[product] &lt; num: print(&#39;재고가 부족합니다&#39;) else: inventory[product] -= num print(inventory[product],&#39;개 남았습니다&#39;) # 재고확인 def search_product(): while True: product = input(&#39;상품명:&#39;) if product == &#39;&#39;: break print(inventory.get(product,&#39;등록되지 않은 상품&#39;)) # 전체구조 inventory = {&#39;삼각김밥&#39;:10,&#39;커피우유&#39;:10} #초기재고 while True: print(&#39; ===================재고관리 시스템 ====================== &#39;) print(&#39; 1: 재고등록 2: 제품판매 4:재고 확인 0: 프로그램 종료 &#39;) menu = input(&#39;메뉴를 입력하세요:&#39;) if menu == &#39;0&#39;: #문자열 break elif menu == &#39;1&#39;: add_product() elif menu == &#39;2&#39;: sel_product() elif menu == &#39;3&#39;: search_product() . &#49688;&#51221; - &#51228;&#54408;&#54032;&#47588; get&#49324;&#50857; . # 재고 등록 def add_product(): while True: product = input(&#39;상품명:&#39;) if product == &#39;&#39;: break num = int(input(&#39;갯수:&#39;)) if product in inventory.keys(): inventory[product] += num else: inventory[product] = num print(&#39;-&#39;*50) for key,value in inventory.items(): print(key,&#39;:&#39;,value) # 제품 판매 def sel_product(): while True: product = input(&#39;상품명:&#39;) if product == &#39;&#39;: break # 추가 조건문 if inventory.get(product,&#39;미등록&#39;) == &#39;미등록&#39;: print(&#39;등록되지 않은 상품입니다&#39;) break # if product not in inventory.keys(): # print(&#39;등록되지 않은 상품입니다&#39;) # break num = int(input(&#39;갯수:&#39;)) if inventory[product] &lt; num: print(&#39;재고가 부족합니다&#39;) else: inventory[product] -= num print(inventory[product],&#39;개 남았습니다&#39;) # 재고확인 def search_product(): while True: product = input(&#39;상품명:&#39;) if product == &#39;&#39;: break print(inventory.get(product,&#39;등록되지 않은 상품&#39;)) # 전체구조 inventory = {&#39;삼각김밥&#39;:10,&#39;커피우유&#39;:10} #초기재고 while True: print(&#39; ===================재고관리 시스템 ====================== &#39;) print(&#39; 1: 재고등록 2: 제품판매 4:재고 확인 0: 프로그램 종료 &#39;) menu = input(&#39;메뉴를 입력하세요:&#39;) if menu == &#39;0&#39;: #문자열 break elif menu == &#39;1&#39;: add_product() elif menu == &#39;2&#39;: sel_product() elif menu == &#39;3&#39;: search_product() . inventory = {&#39;삼각김밥&#39;:10,&#39;커피우유&#39;:10} #초기재고 def 재고등록(): #재고등록 함수 설정 while True: product=input(&#39;상품명:&#39;) #상품입력 if product == &#39;&#39;: #엔터입력시 반복문 종료 break num=input(&#39;갯수:&#39;) #갯수입력 &amp; (엔터입력시 반복문을 종료하기 위해 int로 형변환 하지 않았음) if num == &#39;&#39;: #위 num값 입력시 int로 형변환 해주면 이 부분에서 에러 발생 break elif product in inventory: #입력한 상품이 기존 inventory에 있을 경우 갯수 추가 inventory[product]+=int(num) #계산시 int로 형변환 else: #입력한 상품이 기존 inventory에 없을 경우 갯수 추가 inventory[product]=int(num) print(&#39;-&#39;*15,&#39;보유 재고&#39;,&#39;-&#39;*15) for product, num in inventory.items(): #item함수를 사용하여 product,num에 key값,value값 할당 print(f&#39;{product} : {num}&#39;) #product=key, num=value 값 print def 제품판매(): while True: product=input(&#39;상품명:&#39;) if product==&#39;&#39;: break elif product not in inventory: print(&#39;해당 상품이 등록되어 있지 않습니다.&#39;) break num=input(&#39;판매갯수 입력:&#39;) if num == &#39;&#39;: break elif int(num)&gt;inventory[product]: print(&#39;재고가 부족합니다.&#39;) else: inventory[product]-=int(num) print(f&#39;{product}는 {inventory[product]}개 남았습니다.&#39;) def 재고확인(): print(&#39;-&#39;*15,&#39;보유 재고&#39;,&#39;-&#39;*15) for product, num in inventory.items(): print(f&#39;{product} : {num}&#39;) while True: print(&#39;&#39;&#39; 재고관리 시스템-- | 1:재고등록 2:제품판매 3:재고확인 0:프로그램 종료 | --&#39;&#39;&#39;) menu=input(&#39;메뉴를 선택하세요:&#39;) if menu==&#39;1&#39;: print(&#39;&#39;&#39; --재고관리 시스템- | 1.재고등록 탭 입니다. | &#39;&#39;&#39;) 재고등록() elif menu==&#39;2&#39;: print(&#39;&#39;&#39; --재고관리 시스템- | 2.제품판매 탭 입니다. | &#39;&#39;&#39;) 제품판매() elif menu==&#39;3&#39;: print(&#39;&#39;&#39; --재고관리 시스템- | 3.재고확인 탭 입니다. | &#39;&#39;&#39;) 재고확인() else: print(&#39;재고 관리 시스템을 종료합니다.&#39;) break .",
            "url": "https://jungsun17.github.io/pythonrepo/2021/06/07/_06_02_5%ED%8C%80_%EB%B0%95%EC%A0%95%EC%84%A0.html",
            "relUrl": "/2021/06/07/_06_02_5%ED%8C%80_%EB%B0%95%EC%A0%95%EC%84%A0.html",
            "date": " • Jun 7, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "반복문",
            "content": ". for &#44396;&#51312;: &#54943;&#49688; &#51228;&#50612; &#48152;&#48373; . #시퀀스에 있는 값이 제어변수에 하나씩 할당되며 값이 할당될 때마다 명령블록이 실행된다. for i in [1,2,3,4,5,6,9,9]: print(i) . for i in &#39;computer&#39;: print(i) . for i in &#39;computer&#39;: print(i, end = &#39;&#39;) . for i in range(5): print(i) . range() &#54632;&#49688; . 일정한 범위의 정수들을 생성한다. | . range([initial_value, ] final value [, step]) =&gt; 증가값 생략 가능 . for i in range(5): print(i,end= &quot; &quot;) . for i in range(1,6): print(i,end= &quot; &quot;) . for i in range(1,10,2): print(i,end= &quot; &quot;) . for i in range(1,100,20): print(i,end= &quot; &quot;) . for i in range(1,100,20): print(i,end= &quot;&quot;) . for i in range(1,100,20): print(i) . for i in range(1,10,-1): print(i,end= &quot; &quot;) . for i in range(10,0,-1): print(i,end= &quot; &quot;) . for i in range(100): print(&#39;Hello World!!&#39;) . while &#44396;&#51312;: &#51312;&#44148; &#51228;&#50612; &#48152;&#48373; . i = 1 #while문 옆에는 무조건 조건식이 들어가야 한다 (리스트 no) while i &lt;= 5: #루프의 조건식에 사용되는 변수는 루프에 들어가기 전, 초기화되어야 한다. print(i,end= &#39; &#39;) i = i + 1 #루프의 조건식에 사용되는 변수 값은 루프 내에서 변경되어야 한다. . i = 0 while i &lt;= 5: i = i + 1 print(i,end= &#39; &#39;) . i = 1 while i &lt;= 5: print(i,end= &#39; &#39;) i = i + 1 . for i in range(1,6): print(i,end=&#39; &#39;) . 무한루프일때 ctrl+ m i =&gt; 실행중단 . #변수i를 증가시키는 것을 까먹어서 무한루프에 빠졌다. 변수 i는 영원히 1이다. 따라서 i&lt;=는 영원히 True이다. i = 1 while i &lt;= 5: # i값이 계속 1이므로 무한루프 print(i) print(&#39;end&#39;) . &#50696;&#51228; . name = &#39; &#39; while name != &#39;q&#39;: name = input(&#39;이름을 입력하세요:&#39;) print(name) #Tap 사용 . name = &#39; &#39; while name != &#39;q&#39;: name = input(&#39;이름을 입력하세요:&#39;) print(name) #Tap 미사용 . food = &#39; &#39; while food != &#39;매운오돌뼈&#39;: food = input(&#39;음식명 입력:&#39;) print(food) . food = &#39; &#39; while food != &#39;매운오돌뼈&#39;: food = input(&#39;음식명 입력:&#39;) print(food) #들여쓰기 안 함 . name = &#39; &#39; while name != &#39;q&#39;: name = input(&#39;이름을 입력하세요:&#39;) if name != &#39;q&#39;: print(name) . animal = &#39; &#39; while animal != &#39;elephant&#39;: animal = input(&#39;동물:&#39;) if animal != &#39;elephant&#39;: print(&#39;No&#39;) print(animal) . &#48152;&#48373;&#47928; &#50696;&#51228; . &#50696;&#51228; 1 . sum1 = 0 #합계 초기화 for i in range(5): #5번 반복 sum1 += int(input(&#39;정수입력:&#39;)) #입력 &amp; 입력한 결과를 합계에 누적하여 더하기 (한번에 해결) print(&#39;합계출력:&#39;,sum1) #합계 출력 . sum = 0 #합계 초기화 for i in range(5): #5번 반복 num = int(input(&#39;정수입력:&#39;)) #입력 sum += num #입력한 결과를 합계에 누적하여 더하기 (나누어서 해결) print(&#39;합계출력:&#39;,sum) #합계 출력 . sum1 = 0 #합계 초기화 for i in range(3): #3번 반복 num = float(input(&#39;실수:&#39;)) #입력 sum1 += num #입력한 결과를 합계에 누적하여 더하기 print(&#39;합계출력:&#39;,sum1) . &#50696;&#51228; 2 . sum1 = 0 n = int(input(&#39;몇개의 숫자를 더할까요? :&#39;)) for i in range(n): sum1 += int(input(&#39;정수입력:&#39;)) print(&#39;합계출력:&#39;,sum1) . sum1 = 0 n = int(input(&#39;몇개의 숫자를 더할까요? :&#39;)) for i in range(n): num = int(input(&#39;정수입력:&#39;)) sum1 += num print(&#39;합계출력:&#39;,sum1) . mult = 3 n = int(input(&#39;몇개의 숫자를 곱할까요? :&#39;)) for i in range(n): num = int(input(&#39;정수:&#39;)) mult *= num print(&#39;합계출력:&#39;,mult) . &#50696;&#51228; 3 . sum1 = 0 n = int(input(&#39;몇개의 숫자를 더할까요? :&#39;)) for i in range(n): num = int(input(&#39;정수입력:&#39;)) if num % 2 == 0: sum1 += num print(&#39;합계출력:&#39;,sum1) . sum1 = 0 n = int(input(&#39;몇개의 숫자를 더할까요? :&#39;)) for i in range(n): num = int(input(&#39;정수입력:&#39;)) if num % 3 == 0: sum1 += num print(&#39;합계출력:&#39;,sum1) . &#50696;&#51228; 4 . total_sum = 0 num = int(input(&#39;숫자:&#39;)) while num != 0: total_sum += num num = int(input(&#39;숫자:&#39;)) print(&#39;합계출력:&#39;,total_sum) . total_sum = 20 num = int(input(&#39;숫자:&#39;)) while num != 100: total_sum += num num = int(input(&#39;숫자:&#39;)) print(&#39;합계출력:&#39;,total_sum) . total_sum = 0 check = 1 num = &#39; &#39; #초기값 while num != 0 and check == 1: num = int(input(&#39;숫자:&#39;)) total_sum += num print(&#39;합계출력:&#39;,total_sum) . total_sum = 0 check = 1 num = 0 #초기값 while num != 0 and check ==1: num = int(input(&#39;숫자:&#39;)) total_sum += num print(&#39;합계출력:&#39;,total_sum) . sum1 = 0 chk = 1 while num!=0 or chk == 1: sum1+=num num = int(input(&quot;숫자: &quot;)) if chk == 1: chk = 1 + chk print(&#39;합계:&#39;, sum1) . &#50696;&#51228; 5 . tot_sum = 0 no = int(input(&#39;1부터 몇까지 더할까요?:&#39;)) for i in range(1, no+1): tot_sum += i print(i) print(f&#39;1부터 {no}까지 더한 합계는 {tot_sum}입니다&#39;) . tot_sum = 0 n = int(input(&#39;1부터 몇까지 더할까요?:&#39;)) for x in range(1, n+1): tot_sum += x print(f&#39;1부터 {n}까지 더한 합계는?:&#39;,tot_sum) . sum_1 = 0 n = int(input(&#39;1부터 몇까지 더할까요? :&#39;)) for i in range(1,n+1): sum_1 += i print(f&#39;총 합계는 {sum_1}입니다&#39;) . &#50696;&#51228; 6 . sum1 =0 no1 = int(input(&#39;몇부터 더할까요? :&#39;)) no2 = int(input(&#39;몇까지 더할까요? :&#39;)) for i in range(no1,no2+1): sum1 += i print(f&#39;{no1}부터 {no2}까지 더한 합계는: {sum1}이다&#39;) . # 숫자 n1,n2를 받아 n1~n2까지의 합계 출력 sum1 = 0 # 앞으로 사용할 sum1 = 0값을 대입, 후에 문제가 발생하지 않게 미리 선언해줌 n1 = int(input(&#39;몇부터 더할까요? :&#39;)) # n1 받기 n2 = int(input(&#39;몇까지 더할까요? :&#39;)) # n2 받기 for i in range(n1,n2+1): # n1~n2까지 반복, range(시작값, 끝값+1) 주의 sum1 += i # sum1 = sum1 + i 와 동일합니다. sum1에 0이 있으므로 n1부터 n2까지 더해집니다 print(f&#39;{n1}부터 {n2}까지 더한 합계는:&#39;,sum1) # 더한 값 출력하기# . &#50696;&#51228; 7 . #프로그램 실행 초반에 사용자가 입력할 숫자의 개수를 입력 받는다. #임의의 개수 숫자 평균 n = int(input(&#39;입력받을 정수의 개수:&#39;)) tot_sum = 0 for i in range(n): num = int(input(&#39;정수:&#39;)) tot_sum += num if n == 0: print(&#39;0개의 정수가 입력되었다&#39;) else: print(&#39;평균:&#39;, tot_sum/n) . n = int(input(&#39;입력받을 정수의 개수:&#39;)) tot_sum = 0 #초기값 설정 필요 for i in range(n): num = int(input(&#39;정수:&#39;)) tot_sum += num if n == 0: print(&#39;0개의 정수가 입력되었다&#39;) else: print(&#39;평균:&#39;, int(tot_sum/n)) . n = int(input(&#39;입력받을 정수의 개수:&#39;)) # 몇 개의 정수를 입력받을 지 설정 sum1=0 # 앞으로 사용할 sum1 = 0대입해서 후에 문제가 발생하지 않게 조정해줍니다 for i in range(n): # n번 반복, 주의) range(n) = 0,1,2...,n-1이 들어가서 n번 반복됩니다 num = int(input(&#39;정수:&#39;)) # 정수입력받기 sum1 += num # sum1 = sum1 + num # 해석 &quot;&quot;&quot; 예를 들어 n = 2라고 하면 처음에 i = 0이 들어가 1번 for문을 실행해줍니다 그리고 num 에 원하는 정수를 받아주고 받은 정수 num을 sum1에 넣어줍니다.(이 상태에서 sum1 = num입니다) for문 안에 내용을 한 번 다 실행시켜주었으니 다시 위로 올라갑니다 i = 1이 들어가고 2번째 반복문을 실행시켜줍니다 num에 원하는 정수를 받아줍니다. 받은 정수 num을 sum1에 넣어줍니다.(이 상태에서 sum1 = 첫 번째 받은 정수 + 두 번째 받은 정수) 이후 for문을 총 2번 반복해주었기에 for문에서 나갑니다. &quot;&quot;&quot; if n == 0: print(&#39;0개의 정수를 입력하셨습니다&#39;) # 만약 i = 0이면 정수를 받을 수 없습니다. else: print(&#39;평균:&#39;, sum1/n) # sum1 = 받은 정수의 합, n = 정수의 갯수, sum1/n : 평균값 . &#50696;&#51228; 8 . # n! = n * (n-1) * ... * 2 * 1 n = int(input(&#39;몇 factorial? :&#39;)) factorial = 1 for i in range (n, 0, -1): factorial *= i print(i,factorial) print(f&#39;{n}! = {factorial}&#39;) . # 정수 n을 입력받아 n!을 계산하는 프로그램 작성 # n! = n * (n - 1) * (n - 2) * ...*1 # n팩토리얼에 대한 수학적 설명 n = int(input(&#39;몇 팩토리얼? :&#39;)) # n을 받기 sum1=1 # n! = n * (n-1) * (n-2) * ... * 1에서 마지막이 1로 끝남. 따라서 1을 미리 설정해줌 for i in range(n,0,-1): # n 부터 1까지 -1씩 줄어들어가면서 반복을 시킴 # print(i) sum1 *= i # sum1 = sum1 * i와 동일함, n! 계산부분 print(f&#39;{n}! = {sum1}&#39;) # n!의 결과값을 출력함 . &#50696;&#51228; 9 . n = int(input(&#39;구구단 몇단을 출력하시겠습니까?&#39;)) for i in range (1,10): print(f&#39; {n} * {i} = {n * i}&#39;) . n = int(input(&#39;구구단 몇단을 출력하시겠습니까?&#39;)) for i in range (1,16): print(f&#39; {n} * {i} = {n * i}&#39;) . n = int(input(&#39;구구단 몇단을 출력할까요? :&#39;)) # 몇 단 출력할지 받는 부분 for i in range(1,10): # 1부터 9까지 1씩 증가하면서 반복 ex) 9 * 1에서 1에 해당하는 부분 print(f&#39; {n} * {i} = {n*i}&#39;,end=&#39; &#39;) # for문 안에 print를 통해 ex) 9 * 1 = 9, 9 * 2 = 18 처럼 계속 출력, end는 옆으로 출력하는 것을 말합니다 . &#51473;&#52393;&#48152;&#48373;&#44396;&#51312; . for i in range (5): #내부루프와 외부루프는 동일한 제어변수 (i VS j) 사용금지 for j in range(3): #내부 for문을 외부 for문의 시퀀스만큼 반복한다. print(i,j,) . for i in range (1,5): #내부루프와 외부루프는 동일한 제어변수 (i VS j) 사용금지 for j in range(1,3): #내부 for문을 외부 for문의 시퀀스만큼 반복한다. print(i,j,) . for i in range (1,7,1): #내부루프와 외부루프는 동일한 제어변수 (i VS j) 사용금지 for j in range(1,5,2): #내부 for문을 외부 for문의 시퀀스만큼 반복한다. print(i,j) . &#50696;&#51228; 10 . for i in range(2,10): for j in range(1,10): print(f&#39; {i} * {j} = {i * j}&#39;, end = &#39; t&#39;) print() . for i in range(2,10): # i : 몇 단인지, for j in range(1,10): # j : 단 뒤에 곱하는 값 print(f&#39; {i} * {j} = {i*j}&#39;,end=&#39; t&#39;) # end : 옆으로 써줌, t : tab만큼 띄고 써줌 print() # ex) i = 2일 때 j = 1~9까지 들어가고 print문을 9번 반복합니다. . for i in range(1,10): #시작값 위치 바꾸기 for j in range(2,10): print(f&#39; {j} * {i} = {i * j}&#39;, end = &#39; t&#39;) #i &amp; j 위치 바꾸기 print() . for i in range(1,10): # i : 단 뒤에 곱하는 값 for j in range(2,10): # j : 몇 단인지 print(f&#39; {j} * {i} = {i*j}&#39;,end=&#39; t&#39;) # 단 * 단 뒤에 곱하는 값을 옆으로 tab만큼 띄고 출력 print() # 구구단 가로와 다른점 &quot;&quot;&quot; ex) i = 1일 때 2단부터 9단까지 옆으로 tab만큼 띄고 출력을 합니다. 이런 형식을 i = 1 ~ 10까지 10번 반복합니다. &quot;&quot;&quot; . break . 반복에서 벗어나기 | . t = &#39;I have a dream&#39; letter =input(&#39;찾을 문자:&#39;) for i in t: print(i,end=&quot; &quot;) if i == letter: break . text = &#39;개미는 뚠뚠 오늘도 뚠뚠 열심히 일을 하네&#39; let = input(&#39;찾을 문자:&#39;) for i in text: print(i,end=&quot; &quot;) if i == let: break . Up &amp; Down &#44172;&#51076; . # 입력한 숫자가 정답보다 작으면 &#39;DOWN&#39;, 정답보다 크면 &#39;UP&#39; 출력 후 숫자를 다시 입력받는다. # 정답을 맞추면 &#39;정답!&#39;이라고 출력하고 게임을 끝낸다. # My version print(&#39;Up &amp; Down game&#39;) num = 78 import random no = random.randint(1,100) while no != num: num = int(input(&#39;1부터 100 사이의 숫자를 입력하세요:&#39;)) if num == 78: print(&#39;정답!&#39;) break elif num &gt; 78: print(&#39;Down&#39;) elif num &lt; 78: print(&#39;Up&#39;) . import random # random 호출 r_answer = random.randint(1,100) # 1~100사이에 숫자하나를 임의로 설정 m_answer = int(input(&#39;예상숫자:&#39;)) # 내가 예상하는 숫자 넣어보기 while r_answer != m_answer: # 예상답과 정답이 다르면 실행됩니다. if r_answer &lt; m_answer: # Down 입력 print(&#39;Down&#39;) else: # UP 출력 print(&#39;Up&#39;) m_answer = int(input(&#39;예상숫자:&#39;)) # if/else문이 한 번 실행된 뒤 다시 예상답을 받습니다. print(&#39;정답&#39;) . 코드메이트 님이 주신 반복문 예제 모음 . for i in range(5): print(&#39;파이썬이 좋아요&#39;) . bts_mem = [&#39;Jin&#39;,&#39;RM&#39;,&#39;J-hope&#39;,&#39;Suga&#39;,&#39;Jungkook&#39;,&#39;V&#39;,&#39;Jimin&#39;] for i in bts_mem: print(i) . #My version while True: light_col = input(&#39;신호등 무슨 색상?: &#39;) if light_col == &#39;초록불&#39;: print(&#39;출발하세요&#39;) break . #코드메이트 님 답 (위 코드와 차이점?? print() 위치 &amp; 들여쓰기) while True: light = input(&#39;신호등 색상을 입력하세요:&#39;) if light == &#39;초록불&#39;: break print(&#39;출발하세요&#39;) .",
            "url": "https://jungsun17.github.io/pythonrepo/2021/06/07/_06_01_5%ED%8C%80_%EB%B0%95%EC%A0%95%EC%84%A0.html",
            "relUrl": "/2021/06/07/_06_01_5%ED%8C%80_%EB%B0%95%EC%A0%95%EC%84%A0.html",
            "date": " • Jun 7, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "딕셔너리 복습, 집합, 조건문",
            "content": ". &#46357;&#49492;&#45320;&#47532; &#48373;&#49845; &#50696;&#51228; . 예제1: 편의점 재고 관리 . #1단계: 엔터(&quot;&quot;)를 입력할 때까지 물건 이름과 개수를 입력받는다. dic_li = {} while True: prod = input(&#39;물건 이름:&#39;) if prod == &#39;&#39;: break num = int(input(&#39;개수:&#39;)) dic_li[prod] = num dic_li . 물건 이름:필통 개수:15 물건 이름:사탕 개수:7 물건 이름:책 개수:18 물건 이름: . {&#39;사탕&#39;: 7, &#39;책&#39;: 18, &#39;필통&#39;: 15} . &#51665;&#54633; (set) . 자료들이 순서와 중복 없이 저장된 것 . | 중괄호 {} 안에 요소를 쉼표로 구별하여 나열한다 . | . Set_name = {value1, value2, ..., valueN} . set_wish = set([&#39;양파링&#39;, &#39;꽈배기&#39;, &#39;새우깡&#39;, &#39;수미칩&#39;,&#39;새우깡&#39;]) set_wish . {&#39;꽈배기&#39;, &#39;새우깡&#39;, &#39;수미칩&#39;, &#39;양파링&#39;} . &#51665;&#54633; &#49373;&#49457; (2&#44032;&#51648; &#48169;&#48277;) . 집합명 = {요소1, 요소2, ..., 요소N} . | 집합명 = set([소1, 요소2, ..., 요소N]) . | . set_wish = {&#39;양파링&#39;, &#39;꽈배기&#39;, &#39;새우깡&#39;, &#39;수미칩&#39;,&#39;새우깡&#39;} set_wish . {&#39;꽈배기&#39;, &#39;새우깡&#39;, &#39;수미칩&#39;, &#39;양파링&#39;} . set_wish = set([&#39;양파링&#39;, &#39;꽈배기&#39;, &#39;새우깡&#39;, &#39;수미칩&#39;,&#39;새우깡&#39;]) set_wish . {&#39;꽈배기&#39;, &#39;새우깡&#39;, &#39;수미칩&#39;, &#39;양파링&#39;} . set_hello = set(&quot;Hello&quot;) set_hello . {&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;o&#39;} . &#51665;&#54633;: &#50836;&#49548; &#52628;&#52636; . 집합 자료형은 순서가 없기 때문에 인덱싱으로 값을 얻을 수 없다. . | 집합 자료형에 저장된 값을 인덱싱으로 접근하려면 리스트나 튜플로 변환하여 사용한다 . | . set_wish = set([&#39;양파링&#39;, &#39;꽈배기&#39;, &#39;새우깡&#39;, &#39;수미칩&#39;,&#39;새우깡&#39;]) list_wish = list(set_wish) print(list_wish) print(list_wish[2]) . [&#39;새우깡&#39;, &#39;양파링&#39;, &#39;수미칩&#39;, &#39;꽈배기&#39;] 수미칩 . set_wish = set([&#39;양파링&#39;, &#39;꽈배기&#39;, &#39;새우깡&#39;, &#39;수미칩&#39;,&#39;새우깡&#39;]) list_wish = tuple(set_wish) print(list_wish) print(list_wish[2]) . (&#39;새우깡&#39;, &#39;양파링&#39;, &#39;수미칩&#39;, &#39;꽈배기&#39;) 수미칩 . &#51665;&#54633;: &#50672;&#49328; . a와 b의 합집합: a.union(b) . | a와 b의 교집합: a.intersection(b) . | a와 b의 차집합: a.difference(b) . | . sweety = {&#39;빼빼로&#39;, &#39;가나&#39;, &#39;허니버터&#39;} salty = {&#39;양파링&#39;, &#39;새우깡&#39;, &#39;수미칩&#39;} print(sweety.union(salty)) print(sweety|salty) . {&#39;새우깡&#39;, &#39;양파링&#39;, &#39;빼빼로&#39;, &#39;허니버터&#39;, &#39;가나&#39;, &#39;수미칩&#39;} {&#39;새우깡&#39;, &#39;양파링&#39;, &#39;빼빼로&#39;, &#39;허니버터&#39;, &#39;가나&#39;, &#39;수미칩&#39;} . sweety = {&#39;빼빼로&#39;, &#39;가나&#39;, &#39;허니버터&#39;} salty = {&#39;양파링&#39;, &#39;새우깡&#39;, &#39;수미칩&#39;} print(sweety.intersection(salty)) print(sweety&amp;salty) . set() set() . sweety = {&#39;빼빼로&#39;, &#39;가나&#39;, &#39;허니버터&#39;} salty = {&#39;양파링&#39;, &#39;새우깡&#39;, &#39;수미칩&#39;} print(sweety.difference(salty)) print(sweety-salty) print(salty.difference(sweety)) print(salty-sweety) . {&#39;허니버터&#39;, &#39;가나&#39;, &#39;빼빼로&#39;} {&#39;허니버터&#39;, &#39;가나&#39;, &#39;빼빼로&#39;} {&#39;새우깡&#39;, &#39;양파링&#39;, &#39;수미칩&#39;} {&#39;새우깡&#39;, &#39;양파링&#39;, &#39;수미칩&#39;} . &#51665;&#54633;: &#52628;&#44032; . 집합명.add(요소) | 집합명.update(리스트) | . set_wish = {&#39;양파링&#39;, &#39;꽈배기&#39;, &#39;새우깡&#39;, &#39;수미칩&#39;,&#39;새우깡&#39;} set_wish.add(&#39;허니버터&#39;) set_wish . {&#39;꽈배기&#39;, &#39;새우깡&#39;, &#39;수미칩&#39;, &#39;양파링&#39;, &#39;허니버터&#39;} . set_wish = {&#39;양파링&#39;, &#39;꽈배기&#39;, &#39;새우깡&#39;, &#39;수미칩&#39;,&#39;새우깡&#39;} set_wish.update([&#39;허니버터&#39;, &#39;칸쵸&#39;]) set_wish . {&#39;꽈배기&#39;, &#39;새우깡&#39;, &#39;수미칩&#39;, &#39;양파링&#39;, &#39;칸쵸&#39;, &#39;허니버터&#39;} . &#51665;&#54633;: &#50836;&#49548; &#49325;&#51228; . 집합명.remove(요소) | . set_wish = {&#39;양파링&#39;, &#39;꽈배기&#39;, &#39;새우깡&#39;, &#39;수미칩&#39;,&#39;새우깡&#39;} set_wish.remove(&#39;꽈배기&#39;) set_wish . {&#39;새우깡&#39;, &#39;수미칩&#39;, &#39;양파링&#39;} . set_wish = {&#39;양파링&#39;, &#39;꽈배기&#39;, &#39;새우깡&#39;, &#39;수미칩&#39;,&#39;새우깡&#39;} set_wish.remove(&#39;뺴뺴로&#39;&#39;) set_wish . File &#34;&lt;ipython-input-36-98bdb06acb1c&gt;&#34;, line 2 set_wish.remove(&#39;뺴뺴로&#39;&#39;) ^ SyntaxError: EOL while scanning string literal . set_wish = {&#39;양파링&#39;, &#39;꽈배기&#39;, &#39;새우깡&#39;, &#39;수미칩&#39;,&#39;새우깡&#39;} if &#39;꽈배기&#39; in list(set_wish): set_wish.remove(&#39;꽈배기&#39;) set_wish . {&#39;새우깡&#39;, &#39;수미칩&#39;, &#39;양파링&#39;} . &#53580;&#49828;&#53944; . fruit = {&#39;망고&#39;, &#39;사과&#39;, &#39;자두&#39;} fruit.update([&#39;파인애플&#39;, &#39;참외&#39;]) fruit fruit.remove(&#39;사과&#39;) fruit . {&#39;망고&#39;, &#39;자두&#39;, &#39;참외&#39;, &#39;파인애플&#39;} . &#50724;&#47448; &#47700;&#49884;&#51648; &#54644;&#49437; . NameError: 참조변수 없음 | . # 코드로 형식 지정됨 . print(number) . NameError Traceback (most recent call last) &lt;ipython-input-47-03090db32dff&gt; in &lt;module&gt;() -&gt; 1 print(number) NameError: name &#39;number&#39; is not defined . SyntaxError: 문법이 잘못되었음 (오타, 괄호 제대로 닫지 않았을 때, 콜론 잘못 사용 등) | . num = 1: print(num) . File &#34;&lt;ipython-input-52-17d95d7de58c&gt;&#34;, line 2 num = 1: ^ SyntaxError: invalid syntax . TypeError: 타입이 맞지 않음 | . a, b = &quot;1&quot;, &quot;1&quot; c = a - b print(c) . TypeError Traceback (most recent call last) &lt;ipython-input-55-c8ae4fef95a7&gt; in &lt;module&gt;() 1 a, b = &#34;1&#34;, &#34;1&#34; -&gt; 2 c = a - b 3 print(c) TypeError: unsupported operand type(s) for -: &#39;str&#39; and &#39;str&#39; . ZeroDivisionError: 0으로나눌 수 없음 | . a, b = 1, 0 c = a/b print(c) . ZeroDivisionError Traceback (most recent call last) &lt;ipython-input-58-7a5251cbbd36&gt; in &lt;module&gt;() 1 a, b = 1, 0 -&gt; 2 c = a/b 3 print(c) ZeroDivisionError: division by zero . IdentationError: 들여쓰기 오류 | . print(1) print(2) . File &#34;&lt;ipython-input-53-d78587176f97&gt;&#34;, line 2 print(2) ^ IndentationError: unexpected indent . &#51312;&#44148;&#47928; . if | if-else | if-elif | if-elif-else | 중첩 if | . &#53076;&#46300;&#48660;&#47197; . 콜론 (:) 아래쪽부터 | . a = 1 if a &lt; 0: print(&#39;a는 0보다 작다.&#39;) print(&#39;a는 음수이다&#39;) print(&#39;끝&#39;) . 끝 . a = 1 if a &lt; 0: print(&#39;a는 0보다 작다.&#39;) print(&#39;a는 음수이다&#39;) print(&#39;끝&#39;) . a는 음수이다 끝 . &#50696;&#51228; . 예제: 코로나 자가진단 프로그램 1단계 . 체온을 입력받아 체온이 37.5도 초과이면 &#39;등교불가&#39;를 출력 . temp = float(input(&#39;체온:&#39;)) if temp &gt; 37.5: print(&#39;등교불가&#39;) . 체온:35 . a = 5 b = 4 if a%b == 0: print(f&#39;{a}는 {b}로 나누어 떨어진다&#39;) else: print(f&#39;{a}는 {b}로 나머지가 {a%b}이다&#39;) . 5는 4로 나머지가 1이다 . 예제: 코로나 자가진단 프로그램 3단계 . temp = float(input(&#39;체온:&#39;)) check1 = input(&#39;코로나 검사를 기다리시나요? (y/n)&#39;) check2 = input(&#39;자가격리 중이신가요?&#39;) if temp &gt; 37.5: print(&#39;발열기준 초과: 등교불가&#39;) elif check1 == &#39;y&#39; or &#39;Y&#39;: print(&#39;검사대기 중 등교불가&#39;) elif check2 == &#39;y&#39; or &#39;Y&#39;: print(&#39;자가격리 중 등교불가&#39;) else: print(&#39;등교가능&#39;) . 체온:38 코로나 검사를 기다리시나요? (y/n)y 자가격리 중이신가요?y 발열기준 초과: 등교불가 . 예제: 점수에 따른 등급 출력하기 . score = int(input(&#39;점수:&#39;)) if score &gt;= 90: grade = &#39;A&#39; elif score &gt;= 80: grade = &#39;B&#39; elif score &gt;= 70: grade = &#39;C&#39; elif score &gt;= 60: grade = &#39;D&#39; else: grade = &#39;F&#39; print(f&#39;당신의 등급은 {grade}입니다.&#39;) . 점수:67 당신의 등급은 D입니다. . 예제: 금액에 따른 할인률 계산하기 . 물건 구매가를 입력 받고, 금액에 따른할인률을 계산하여 구매가, 할인율, 할인금액, 지불금액을 출력하는 프로그램 작성 . price = int(input(&#39;물건 구매가를 입력하세요:&#39;)) if price &gt;=10000: discount = 5 elif price &lt; 50000: discount = 5 elif price &gt;= 50000: discount = 7.5 elif price &lt; 100000: discount = 7.5 elif price &gt;= 100000: discount = &#39;10&#39; else: discount = 0 print(&#39;구매가: &#39;, price,&#39;원&#39;) print(&#39;할인률: &#39;, discount,&#39;%&#39;) print(&#39;할인금액: &#39;, int(price*(discount/100)),&#39;원&#39;) print(&#39;지불금액: &#39;, int(price-(price*(discount/100))),&#39;원&#39;) . 물건 구매가를 입력하세요:60000 구매가: 60000 원 할인률: 5 % 할인금액: 3000 원 지불금액: 57000 원 . price = int(input(&#39;물건 구매가를 입력하세요:&#39;)) if price &gt;= 100000: sale = 10 elif 50000 &lt;= price &lt; 100000: sale = 7.5 elif 10000 &lt;= price &lt; 50000: sale = 5 else: sale = 0 print(&#39;구매가: &#39;, price,&#39;원&#39;) print(&#39;할인률: &#39;, discount,&#39;%&#39;) print(&#39;할인금액: &#39;, int(price*(discount/100)),&#39;원&#39;) print(&#39;지불금액: &#39;, int(price-(price*(discount/100))),&#39;원&#39;) . 물건 구매가를 입력하세요:60000 구매가: 60000 원 할인률: 5 % 할인금액: 3000 원 지불금액: 57000 원 . 예제: 최소값 구하기 . 3개의 수를 입력받아 가장 작은 수를 출력하세요. . no1 = int(input(&#39;넘버 1:&#39;)) no2 = int(input(&#39;넘버 2:&#39;)) no3 = int(input(&#39;넘버 3:&#39;)) min_no = min(no1,no2,no3) print(&#39;가장 작은 수:&#39;, min_no) . 넘버 1:4 넘버 2:5 넘버 3:1 가장 작은 수: 1 . #최솟값 구하기 num1 = int(input(&#39;숫자1: &#39;)) num2 = int(input(&#39;숫자2: &#39;)) num3 = int(input(&#39;숫자3: &#39;)) if num1 &lt; num2 and num1 &lt; num3: print(f&#39;최솟값은: {num1}&#39;) elif num2 &lt; num1 and num2 &lt; num3: print(f&#39;최솟값은: {num2}&#39;) else: print(f&#39;최솟값은: {num3}&#39;) . 숫자1: 3 숫자2: 2 숫자3: 5 최솟값은: 2 . &#45436;&#47532;&#50672;&#49328;&#51088; . 논리연산자를 사용하여 여러 개의 조건을 조합한 조건식을 만들 수 있다. | . # and, or, not print(True and True) print(True and False) print(False and True) print(False and False) print() print(True or True) print(True or False) print(False or True) print(False or False) print() print(not True) print(not False) . True False False False True True True False False True . 1 in [1,2,3] . True . &#39;a&#39; in (&#39;a&#39;,&#39;b&#39;,&#39;c&#39;) . True . &#39;j&#39; not in &#39;python&#39; . True . 예제: 국립공원 계산기 . 나이를 입력받아 국립공원 입장권을 발급하는 프로그램 작성. . 입장료: 3000원 . | 나이 65세 이상 &amp; 7세 이하 = 무료 . | 나이 8세~18세 = 청소년 요금 = 1000원 . | . age = int(input(&#39;나이를 입력하세요:&#39;)) price = 3000 if age &lt;= 7: price = 0 elif age &gt; 65: price = 0 elif 8 &lt;= age &lt;= 18: price = 1000 print(price, &#39;원입니다&#39;) . 나이를 입력하세요:68 0 원입니다 . age = int(input(&#39;나이를 입력하세요:&#39;)) price = 3000 if age &lt;= 7 or age &gt; 65: price = 0 elif age &gt;=8 and age&lt;= 18: price = 1000 print(price, &#39;원입니다&#39;) . 나이를 입력하세요:79 0 원입니다 . 예제: 로그인 프로그램 . 사용자로부터 아이디/패스워드 받아서 프로그램에 저장된 아이디/패스워드와 일치하는지 여부 검사하여 로그인/로그인 실패를 출력하는 프로그램 작성 . user_id = input(&#39;아이디:&#39;) user_password = input(&#39;패스워드:&#39;) if id ==&#39;ID1234&#39; and password == &#39;PWD1234&#39;: print(&#39;로그인 성공&#39;) else: print(&#39;로그인 실패&#39;) . 아이디:ID1234 패스워드:PWD1234 로그인 성공 . id = &#39;ID1234&#39; password = &#39;PWD1234&#39; user_id = input(&#39;아이디:&#39;) user_password = input(&#39;패스워드:&#39;) if id == user_id and password == user_password: print(&#39;로그인 성공&#39;) else: print(&#39;로그인 실패&#39;) . 아이디:ID1234 패스워드:PWD0000 로그인 실패 . 예제: 사칙연산 프로그램 . 두 수와 사칙연산 기호를 입력받아 연산 기호에 따라 연산 결과를 출력하는 프로그램 작성 . numb1 = int(input(&#39;숫자1:&#39;)) numb2 = int(input(&#39;숫자2:&#39;)) sym = input(&#39;연산기호(+,-,*,/):&#39;) if sym == &#39;+&#39;: outcome = numb1+numb2 elif sym == &#39;-&#39;: outcome = numb1-numb2 elif sym == &#39;*&#39;: outcome = numb1*numb2 elif sym == &quot;/&quot;: outcome = numb1/numb2 print(&#39;-&#39;*50) print(numb1,sym,numb2,&#39;=&#39;,outcome) . 숫자1:6 숫자2:4 연산기호(+,-,*,/):+ -- 6 + 4 = 10 . numb1 = int(input(&#39;숫자1:&#39;)) numb2 = int(input(&#39;숫자2:&#39;)) sym = input(&#39;연산기호(+,-,*,/):&#39;) outcome = 0 if sym == &#39;+&#39;: outcome = numb1+numb2 elif sym == &#39;-&#39;: outcome = numb1-numb2 elif sym == &#39;*&#39;: outcome = numb1*numb2 elif sym == &quot;/&quot;: outcome = numb1/numb2 print(&#39;-&#39;*50) print(f&#39;{numb1} {sym} {numb2} = {outcome}&#39;) . 숫자1:6 숫자2:2 연산기호(+,-,*,/):/ -- 6 / 2 = 3.0 . 예제: 주사위 던지기 게임 . 두 개의 주사위를 던져 더 큰 수가 나오는 사람이 이기는 게임 . dice1 = int(input(&#39;주사위1:&#39;)) dice2 = int(input(&#39;주사위2:&#39;)) import random dice1 = random.randint(1,6) dice2 = random.randint(1,6) if dice1 &gt; dice2: print(&#39;주사위1이 이겼습니다&#39;) elif dice1 &lt; dice2: print(&#39;주사위2가 이겼습니다&#39;) else: print(&#39;동점입니다&#39;) . 주사위1:3 주사위2:4 주사위1이 이겼습니다 . #10번 주사위를 던졌을때 승패 비율 까지 나올 수 있게 만들어진 코드 win_1={0] win_2=[0] lose_1=[0] lose_2=[0] import random for i in range(10): no1=random.randint(1,6) no2=random.randint(1,6) if no1&gt;no2: print(f&#39;주사위1:{no1},주사위2:{no2} 주사위 1이 이겼습니다&#39;) win_1[0]+=1 lose_2[0]+=1 elif no1&lt;no2: print(f&#39;주사위1:{no1},주사위2:{no2} 주사위 2가 이겼습니다&#39;) win_2[0]+=1 lose_1[0]+=1 else : print(f&#39;주사위1:{no1},주사위2:{no2} 주사위 수가 같습니다.&#39;) print(f&#39;&#39;&#39;주사위1 {win_1}승{lose_1}패 주사위2 {win_2}승 {lose_2}패&#39;&#39;&#39;) .",
            "url": "https://jungsun17.github.io/pythonrepo/2021/06/07/_05_31_5%ED%8C%80_%EB%B0%95%EC%A0%95%EC%84%A0.html",
            "relUrl": "/2021/06/07/_05_31_5%ED%8C%80_%EB%B0%95%EC%A0%95%EC%84%A0.html",
            "date": " • Jun 7, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "리스트, 튜플, 딕셔너리",
            "content": ". &#47532;&#49828;&#53944; . &#47532;&#49828;&#53944; &#48373;&#49845; . values = [56,12,33,8,3,2,98] total = 0 for x in range(7): total+= values[x] total . 212 . values = [56,12,33,8,3,2,98] total = 0 for x in values: total+= x total . values = [56,12,33,8,3,2,98] total = sum(values) total . 212 . &#47532;&#49828;&#53944; &#50696;&#51228; &#51089;&#49457; . #주사위를 10000번 던져서 나오는 값들의 빈도를 계산하는 프로그램 작성. #즉, 1,2,3,4,5,6이 몇 번 나오는지 계산하자. #난수 발생 함수와 리스트를 사용한다. import random #random 무작위 수를 발생시키는 모듈 dice = [0,0,0,0,0,0] #리스트 초기화 for i in range(10000): #10000 반복 number = random.randint(1,6) #1에서 6사이의 임의의 수 랜덤반복 if number == 1: dice[0]+=1 elif number == 2: dice[1]+=1 elif number == 3: #횟수 카운트 dice[2]+=1 elif number == 4: dice[3]+=1 elif number == 5: dice[4]+=1 elif number == 6: dice[5]+=1 print(dice) . [1646, 1644, 1698, 1658, 1710, 1644] . dice = list(range(1, 7)) dice_no = [] for i in range(10000) : dice_no.append(random.choice(dice)) for i in range(1, len(dice)+1) : print(f&#39;{i}은(는) {dice_no.count(i)} 개&#39;) . 1은(는) 1706 개 2은(는) 1687 개 3은(는) 1660 개 4은(는) 1654 개 5은(는) 1632 개 6은(는) 1661 개 . import random num_1 = [] num_2 = [] num_3 = [] num_4 = [] num_5 = [] num_6 = [] for i in range(10000): dice = random.randrange(1,7) if dice == 1: num_1.append(dice) elif dice == 2: num_2.append(dice) elif dice == 3: num_3.append(dice) elif dice == 4: num_4.append(dice) elif dice == 5: num_5.append(dice) elif dice == 6: num_6.append(dice) print(len(num_1), len(num_2), len(num_3), len(num_4), len(num_5), len(num_6)) . 1636 1671 1681 1672 1612 1728 . #[국어,수학,영어]점수가 포함된 리스트이다. kor = [] eng = [] math = [] scores = [[96,84,80],[96,86,76],[76,95,69],[90,76,91],[82,66,88],[83,86,79],[85,90,83]] for x in scores: kor.append(x[0]) eng.append(x[1]) math.append(x[2]) print(&#39;국어:&#39;,kor) print(&#39;영어:&#39;,eng) print(&#39;수학:&#39;,math) kor_ave = sum(kor)/len(kor) eng_ave = sum(eng)/len(eng) math_ave = sum(math)/len(math) print(&#39;국어평균:&#39;,round(kor_ave,1),&#39;영어평균:&#39;,round(eng_ave),&#39;수학평균:&#39;,round(math_ave,1)) . 국어: [96, 96, 76, 90, 82, 83, 85] 영어: [84, 86, 95, 76, 66, 86, 90] 수학: [80, 76, 69, 91, 88, 79, 83] 국어평균: 86.9 영어평균: 83 수학평균: 80.9 . 튜플(Tuple) . 프로그램이 실행되는 동안 값이 바뀌면 안되는 경우 사용 . tuple_name = (요소1, 요소2, ..., 요소N) . &#53916;&#54540;(Tuple) . 프로그램이 실행되는 동안 값이 바뀌면 안되는 경우 사용 . tuple_name = (요소1, 요소2, ..., 요소N) . t1 = (1,2,3) t1 . (1, 2, 3) . t1 = 1,2,3 t1 . (1, 2, 3) . t1 = (1,) t1 . (1,) . t1 = 1, t1 . (1,) . t1 = (1) t1 . 1 . t1 = (1,5,3,4,2) t2 = (6,7,8,9,8) print(t1[1]) #인덱싱 print(t1[2:4]) #슬라이싱 print(t1+t2) #더하기 print(t1*3) #곱하기 print(len(t1)) #길이 구하기 print(t2.index(9)) #요소 위치 찾기 print(t2.count(8)) #요소의 갯수 sort_t1 = sorted(t1) print(sort_t1) #리스트의 형태로 반환이 된다 . 5 (3, 4) (1, 5, 3, 4, 2, 6, 7, 8, 9, 8) (1, 5, 3, 4, 2, 1, 5, 3, 4, 2, 1, 5, 3, 4, 2) 5 3 2 [1, 2, 3, 4, 5] . &#46357;&#49492;&#45320;&#47532; (Dictionary) . dict_phone = {&#39;홍길동&#39;:&#39;01073940284&#39;,&#39;동구&#39;:&#39;010734854&#39;,&#39;철수&#39;:&#39;01073829594&#39; } dict_phone . {&#39;동구&#39;: &#39;010734854&#39;, &#39;철수&#39;: &#39;01073829594&#39;, &#39;홍길동&#39;: &#39;01073940284&#39;} . &#46357;&#49492;&#45320;&#47532; &#50836;&#49548; &#52628;&#44032;/&#49325;&#51228; . 딕셔너리명[key] = value (요소 추가하기) . dict_scores[&#39;홍길동&#39;] = 90 dict_scores [&#39;동구&#39;] = 95 dict_scores[&#39;철수&#39;] =100 dict_scores . {&#39;동구&#39;: 95, &#39;철수&#39;: 100, &#39;홍길동&#39;: 90} . del 딕셔너리명[key] (요소 삭제하기) . dict_scores[&#39;홍길동&#39;] = 90 dict_scores [&#39;동구&#39;] = 95 dict_scores[&#39;철수&#39;] =100 del dict_scores[&#39;홍길동&#39;] dict_scores . {&#39;동구&#39;: 95, &#39;철수&#39;: 100} . 딕셔너리명(key) . dict_scores = {&#39;홍길동&#39;:90,&#39;동구&#39;:90,&#39;철수&#39;:100} dict_scores[&#39;철수&#39;] . 100 . dict_scores = {&#39;홍길동&#39;:90,&#39;동구&#39;:90,&#39;철수&#39;:100} dict_scores[&#39;송중기&#39;] . KeyError Traceback (most recent call last) &lt;ipython-input-86-4e65205058b7&gt; in &lt;module&gt;() 1 #존재하지 않는 key로 추출하면 Error!!! 2 dict_scores = {&#39;홍길동&#39;:90,&#39;동구&#39;:90,&#39;철수&#39;:100} -&gt; 3 dict_scores[&#39;송중기&#39;] KeyError: &#39;송중기&#39; . 딕셔너리명.get(key) . dict_scores = {&#39;홍길동&#39;:90,&#39;동구&#39;:90,&#39;철수&#39;:100} dict_scores.get (&#39;철수&#39;) . 100 . dict_scores = {&#39;홍길동&#39;:90,&#39;동구&#39;:90,&#39;철수&#39;:100} print(dict_scores.get (&#39;철수&#39;)) print(dict_scores.get(&#39;송중기&#39;,&#39;없음&#39;)) . 100 없음 . 딕셔너리명.pop(key) . dict_scores = {&#39;홍길동&#39;:90,&#39;동구&#39;:90,&#39;철수&#39;:100} score = dict_scores.pop(&#39;철수&#39;) print(score) print(dict_scores) . 100 {&#39;홍길동&#39;: 90, &#39;동구&#39;: 90} . 딕셔너리명.clear() . dict_scores[&#39;홍길동&#39;] = 90 dict_scores [&#39;동구&#39;] = 90 dict_scores[&#39;철수&#39;] =100 dict_scores.clear() dict_scores . {} . 딕셔너리명[key] = value . dict_scores = {&#39;홍길동&#39;:90,&#39;동구&#39;:95,&#39;철수&#39;:100} dict_scores[&#39;철수&#39;] = 85 dict_scores . {&#39;동구&#39;: 95, &#39;철수&#39;: 85, &#39;홍길동&#39;: 90} . key in 딕셔너리명 . dict_scores = {&#39;홍길동&#39;:90,&#39;동구&#39;:90,&#39;철수&#39;:100} &#39;송중기&#39; in dict_scores . False . 딕셔너리명.keys() . dict_scores = {&#39;홍길동&#39;:90,&#39;동구&#39;:90,&#39;철수&#39;:100} print(dict_scores.keys()) print(list(dict_scores.keys())) . dict_keys([&#39;홍길동&#39;, &#39;동구&#39;, &#39;철수&#39;]) [&#39;홍길동&#39;, &#39;동구&#39;, &#39;철수&#39;] . 딕셔너리명.values() . dict_scores = {&#39;홍길동&#39;:90,&#39;동구&#39;:90,&#39;철수&#39;:100} print(dict_scores.values()) print(list(dict_scores.values())) . dict_values([90, 90, 100]) [90, 90, 100] . 딕셔너리명.items() . dict_scores = {&#39;홍길동&#39;:90,&#39;동구&#39;:90,&#39;철수&#39;:100} print(dict_scores.items()) print(list(dict_scores.items())) . dict_items([(&#39;홍길동&#39;, 90), (&#39;동구&#39;, 90), (&#39;철수&#39;, 100)]) [(&#39;홍길동&#39;, 90), (&#39;동구&#39;, 90), (&#39;철수&#39;, 100)] . &#45936;&#51060;&#53552; &#47784;&#46160; &#52636;&#47141;&#54616;&#44592; . dict_scores = {&#39;홍길동&#39;:90,&#39;동구&#39;:95,&#39;철수&#39;:100} for key in dict_scores.keys(): print(key,dict_scores[key]) . 홍길동 90 동구 95 철수 100 . dict_scores = {&#39;홍길동&#39;:90,&#39;동구&#39;:95,&#39;철수&#39;:100} for key,value in dict_scores.items(): print(key,value) . 홍길동 90 동구 95 철수 100 . &#45936;&#51060;&#53552; &#51221;&#47148;&#54616;&#50668; &#45936;&#51060;&#53552; &#47784;&#46160; &#52636;&#47141;&#54616;&#44592; . key를 정렬하여 정렬된 key 순서대로 출력한다 . dict_scores = {&#39;홍길동&#39;:90,&#39;동구&#39;:95,&#39;철수&#39;:100} #딕셔너리의 key를 정렬하여 리스트로 받음 sorted_keys = sorted(dict_scores.keys()) print(sorted_keys) #정렬된 키 리스트 순서로 반복 for key in sorted_keys: print(key,dict_scores[key]) . [&#39;동구&#39;, &#39;철수&#39;, &#39;홍길동&#39;] 동구 95 철수 100 홍길동 90 . dict_scores = { &#39;홍길동&#39;:90, &#39;동구&#39;:95, &#39;철수&#39;:100 } #딕셔너리의 key를 정렬하여 튜플(키, 값)으로 받음 sorted_items = sorted(dict_scores.items()) print(sorted_items) #정렬된 키 리스트 순서로 반복 for key,value in sorted_items: print(key,value) . [(&#39;동구&#39;, 95), (&#39;철수&#39;, 100), (&#39;홍길동&#39;, 90)] 동구 95 철수 100 홍길동 90 . len(딕셔너리명) . dict_scores = {&#39;홍길동&#39;:90,&#39;동구&#39;:90,&#39;철수&#39;:100} len(dict_scores) . 3 . &#50696;&#51228; . #표에 나타난 아이디와 마일리지 포인트를 딕셔너리에 저장 후, 출력하시오. mile_dic = {&#39;kim&#39;:12000, &#39;lee&#39;:11000, &#39;han&#39;:3000, &#39;hong&#39;:5000, &#39;hwang&#39;:18000} mile_dic [&#39;han&#39;] = 5000 print(mile_dic) mile_dic[&#39;jang&#39;] = 7000 print(mile_dic) max_val = max(mile_dic.values()) for key, value in dic.items(): if value == max_val: print(key, value) . {&#39;kim&#39;: 12000, &#39;lee&#39;: 11000, &#39;han&#39;: 5000, &#39;hong&#39;: 5000, &#39;hwang&#39;: 18000, &#39;jang&#39;: 7000} hwang 18000 . mile={&#39;Kim&#39;:12000,&#39;Lee&#39;:11000,&#39;Han&#39;:3000,&#39;Hong&#39;:5000,&#39;Nam&#39;:18000} for key in mile.keys(): print(key,mile[key]) mile[&#39;Han&#39;]=5000 mile[&#39;Jang&#39;]=7000 print(mile) print(max(list(mile.values()))) . Kim 12000 Lee 11000 Han 3000 Hong 5000 Nam 18000 {&#39;Kim&#39;: 12000, &#39;Lee&#39;: 11000, &#39;Han&#39;: 5000, &#39;Hong&#39;: 5000, &#39;Nam&#39;: 18000, &#39;Jang&#39;: 7000} 18000 . #1단계 #엔터를 입력할 때까지 영어단어-뜻을 입력받아 단어장을 만든다. dict_voca = {} while True: #while문을 사용하여 반복 eng = input(&#39;영어:&#39;) if eng == &#39;&#39;: break kor = input(&#39;한국어:&#39;) dict_voca[eng]=kor print(dict_voca) #2단계 #리스트에 입력된 순서대로 테스트를 실시하고, 맞은 개수를 계산한다. score = 0 for english in dict_voca.keys(): korean = input(english+&#39;:&#39;) if korean == dict_voca[english]: score+=1 print(f&#39;맞은개수/전체단어수:{score}/{len(dict_voca)}&#39;) . 영어:durian 한국어:두리안 영어:mango 한국어:망고 영어:pineapple 한국어:파인애플 영어: {&#39;durian&#39;: &#39;두리안&#39;, &#39;mango&#39;: &#39;망고&#39;, &#39;pineapple&#39;: &#39;파인애플&#39;} durian:두리안 mango:몽고 pineapple:애플 맞은개수/전체단어수:1/3 .",
            "url": "https://jungsun17.github.io/pythonrepo/2021/06/07/_05_27_5%ED%8C%80_%EB%B0%95%EC%A0%95%EC%84%A0.html",
            "relUrl": "/2021/06/07/_05_27_5%ED%8C%80_%EB%B0%95%EC%A0%95%EC%84%A0.html",
            "date": " • Jun 7, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "문자열과 데이터 형식",
            "content": ". &#45936;&#51060;&#53552;&#54805; . 단일 데이터 . 정수형 (Integer) | 실수형 (Float) | 문자열형 (String) | 부울형 (Boolean) | . 다수의 데이터 . 리스트 (List) | 튜플 (Tuple) | 딕셔너리 (Dictionary) | 집합 (Set) | . &#48320;&#49688;&#50752; &#45936;&#51060;&#53552;&#54805; . 파이썬에서는 변수의 타입을 미리 지정하지 않는다. . | 변수에 값이 할당딜 때, 할당된 값의 데이터형에 따라 변수 타입이 결정된다. . | . n=1 print(n) print(type(n)) print(id(n)) . 1 &lt;class &#39;int&#39;&gt; 94912381245952 . n = &quot;hi&quot; print(n) print(type(n)) print(id(n)) . hi &lt;class &#39;str&#39;&gt; 140719771046960 . n = True print(n) print(type(n)) print(id(n)) . True &lt;class &#39;bool&#39;&gt; 94912380571904 . n = {1,2,3} print(n) print(type(n)) print(id(n)) . {1, 2, 3} &lt;class &#39;set&#39;&gt; 140719209347024 . test1 = 1 print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . 1 &lt;class &#39;int&#39;&gt; 94912381245952 . test1 = {&#39;name&#39;:&#39;jane&#39;,&#39;age&#39;:15} print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . {&#39;name&#39;: &#39;jane&#39;, &#39;age&#39;: 15} &lt;class &#39;dict&#39;&gt; 140719207716736 . test1 = {&#39;apple&#39;,&#39;orange&#39;,&#39;orange&#39;, &#39;banana&#39;} print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . {&#39;banana&#39;, &#39;orange&#39;, &#39;apple&#39;} &lt;class &#39;set&#39;&gt; 140719209346304 . &#44592;&#48376;&#51088;&#47308;&#54805; . 문자열형(Str) . a = &#39;시간은 &quot;금&quot;이다&#39; print(a) a = &quot;시간은 &#39;금&#39;이다&quot; print(a) . 시간은 &#34;금&#34;이다 시간은 &#39;금&#39;이다 . a = &#39;&#39;&#39;Hello, world! 안녕. Python입니다&#39;&#39;&#39; print(a) . Hello, world! 안녕. Python입니다 . a = &quot;&#39;낮말&#39;은 새가 듣고 &#39;밤말&#39;은 쥐가 듣는다&quot; print(a) . &#39;낮말&#39;은 새가 듣고 &#39;밤말&#39;은 쥐가 듣는다 . a = &#39;&quot;시간은 금&quot;이라는 말이 있다&#39; print(a) . &#34;시간은 금&#34;이라는 말이 있다 . 부울형(True &amp; False) . a = 1&gt;2 print(a) a = 1&lt;2 print(a) . False True . 숫자와 문자열 . #&#39;&#39;안의 숫자는 문자로 인식 a,b = 10,20 print(a+b) a,b = &quot;10&quot;, &quot;20&quot; print(a+b) . 30 1020 . a,b = &quot;10&quot;,20 print(a+b) . TypeError Traceback (most recent call last) &lt;ipython-input-18-ebec1e836dc0&gt; in &lt;module&gt;() 1 # 숫자와 문자열 간에 연산할 수 없다 (오류!!) 2 a,b = &#34;10&#34;,20 -&gt; 3 print(a+b) TypeError: can only concatenate str (not &#34;int&#34;) to str . 정수형과 실수형 . a,b = 10.0,20 print(a+b) . 30.0 . &#54805; &#48320;&#54872; &#54632;&#49688; . int(), float(), str() . a,b = 10,&quot;20&quot; print(a+int(b)) #integer: 정수형으로 변환 a,b = 10,20 print(str(a)+str(b)) #string: 숫자 &amp; 실수를 문자열로 변환 a,b = 10,20 print(float(a)+float(b)) #float: 실수형으로 변환 . 30 1020 30.0 . &#48320;&#49688;&#50640; &#44050; &#51077;&#47141;&#48155;&#44592; . input() . input()으로 입력받은 값은 문자열 타입이다. . name = input(&#39;이름을 입력하세요: &#39;) print(name, &#39;님 안녕하세요?&#39;) . 이름을 입력하세요: 파이썬 파이썬 님 안녕하세요? . &#52636;&#47141; . print() . print(5) print(&quot;Hi&quot;) . 5 Hi . print(2&lt;3) print(2&gt;3) print(1+2) . True False 3 . a = 1 print(a) print(a+1) . 1 2 . f스트링 . 문장 사이에 변수값을 출력할 때 편리하다. . name = input(&#39;이름을 입력하세요: &#39;) print(f&#39;{name}님 안녕하세요?&#39;) . 이름을 입력하세요: 파이썬 파이썬님 안녕하세요? . numb1 = input(&#39;첫번째 숫자를 입력하세요 : &#39;) numb2 = input(&#39;두번째 숫자를 입력하세요 : &#39;) print(f&#39;{numb1} + {numb2} = {int(numb1)+int(numb2)} &#39;) . 첫번째 숫자를 입력하세요 : 10 두번째 숫자를 입력하세요 : 20 10 + 20 = 30 . numb1 = input(&#39;첫번째 숫자를 입력하세요 : &#39;) numb2 = input(&#39;두번째 숫자를 입력하세요 : &#39;) numb1 = int(numb1) numb2 = int(numb2) print(f&#39;{numb1} + {numb2} = {numb1+numb2}&#39;) . 첫번째 숫자를 입력하세요 : 10 두번째 숫자를 입력하세요 : 20 10 + 20 = 30 . &#49328;&#49696; &#50672;&#49328; . x = 100 y =3 print(x+y) print(x-y) print(x*y) print(x/y) print(x//y) print(x%y) # x/y의 나머지 print(-x) print(+x) print(x**y) . 103 97 300 33.333333333333336 33 1 -100 100 1000000 . a,b = 3,4 print(a+b) print (a**b) a,b = 3,0 print(a/b) # 계산 오류!! . 7 81 . ZeroDivisionError Traceback (most recent call last) &lt;ipython-input-25-4932b0262ae1&gt; in &lt;module&gt;() 3 print (a**b) 4 a,b = 3,0 -&gt; 5 print(a/b) # 계산 오류!! ZeroDivisionError: division by zero . &#50696;&#51228; . 화씨 =&gt; 섭씨 변환기 . C = (F-32)*5/9 . F = 100 . a = input(&#39;화씨온도:&#39;) a = int(a) print(&#39;섭씨온도:&#39;,(a-32)* 5/9) . 화씨온도:100 섭씨온도: 37.77777777777778 . a = input(&#39;화씨온도:&#39;) a = int(a) #정수 print(&#39;섭씨온도:&#39;,(a-32)* 5/9) . 화씨온도:100 섭씨온도: 37.77777777777778 . 삼각형의 넓이 . 사용자에게 삼각형의 밑변과 높이를 입력받아 삼각형의 넓이를 출력하는 프로그램 작성 . 삼각형의 넓이 = (밑변 * 높이)/2 . x = input(&#39;밑변:&#39;) y = input(&#39;높이:&#39;) x = int(x) y = int(y) print(&#39;삼각형의 넓이:&#39;,(x*y)/2) . 밑변:3 높이:4 삼각형의 넓이: 6.0 . 원의 넓이 구하기 . 반지름을 입력받아 원의 둘레와 넓이를 구하는 프로그램 작성 . 원의 둘레 = 2 pi r . 원의 넓이 = pi * r^2 . pi = 3.14 . r = float(input(&#39;원의 반지름:&#39;)) pi = 3.14 print (&#39;원의 둘레:&#39;, 2*pi*r, &#39;원의 넓이:&#39;, pi*r**2) #**는 제곱 . 원의 반지름:3 원의 둘레: 18.84 원의 넓이: 28.26 . r = input(&#39;원의 반지름:&#39;) r = float(r) #실수형 (소수점) pi = 3.14 print (&#39;원의 둘레:&#39;, 2*pi*r, &#39;원의 넓이:&#39;, pi*r**2) . 원의 반지름:3 원의 둘레: 18.84 원의 넓이: 28.26 . &#54624;&#45817;&#50672;&#49328;&#51088; . a = 1 print(a) #여러개의 변수에 하나의 값 할당 a = b = c = 1 print(a,b,c) #여러개의 변수에 각각 다른 값 할당 a,b,c = 1,2,3 print(a,b,c) . 1 1 1 1 1 2 3 . 복합할당연산자 . x = 10 x += 20 ## x = x+20 print(x) . 30 . x = 3 y = 5 x *= x+y ## x = x*(x+y) print(x) . 24 . a = 1 a += 11 print(a) a = a + 11 print(a) b = 7 a *= b + a # 아래와 동일 a = a* (b + a) print(a) . 12 23 480930 . s = &quot;ha&quot; print(s*5) . hahahahaha . &#47928;&#51088;&#50676; &#50672;&#44208;&#54616;&#44592; . name = input(&quot;이름을 입력하세요:&quot;) greet = name + &quot;님, 안녕하세요&quot; print(greet) . 이름을 입력하세요:정선 정선님, 안녕하세요 . english = 80 result = &#39;영어점수:&#39; + english + &#39;점&#39; # english는 숫자형 변수 print(result) . TypeError Traceback (most recent call last) &lt;ipython-input-83-9809a418b175&gt; in &lt;module&gt;() 1 english = 80 -&gt; 2 result = &#39;영어점수:&#39; + english + &#39;점&#39; #english는 숫자형 변수 3 print(result) TypeError: can only concatenate str (not &#34;int&#34;) to str . english = 80 result = &#39;영어점수:&#39; + str(english) + &#39;점&#39; # str()함수를 사용하여 데이터를 문자열로 변환한다 print(result) . 영어점수:80점 . sta=input(&#39;경기장: &#39;) winner=input(&#39;이긴팀: &#39;) loser=input(&#39;진팀: &#39;) vip=input(&#39;vip: &#39;) score=input(&#39;스코어: &#39;) print(f&#39;&#39;&#39;오늘 {sta}에서 경기가 열렸습니다. {winner}와(과) {loser}은(는) 치열한 공방전을 펼쳤습니다. {vip}이(가) 맹활약을 펼쳤습니다. 결국 {winner}이(가) {loser}을(를) {score}로 이겼습니다.&#39;&#39;&#39;) . 경기장: 올림픽 경기장 이긴팀: 대한민국 진팀: 일본 vip: 손흥민 스코어: 10:0 오늘 올림픽 경기장에서 경기가 열렸습니다. 대한민국와(과) 일본은(는) 치열한 공방전을 펼쳤습니다. 손흥민이(가) 맹활약을 펼쳤습니다. 결국 대한민국이(가) 일본을(를) 10:0로 이겼습니다. . region=input(&#39;지역: &#39;) type=input(&#39;매물종류: &#39;) evalu=input(&#39;평: &#39;) room_num=input(&#39;방개수: &#39;) price=input(&#39;가격: &#39;) print(f&#39;&#39;&#39;{region}에 위치한 아주 좋은 {type}이(가) 매물로 나왔습니다. 이 {type}는 {evalu}평으로 {room_num}개의 방을 가지고 있습니다. 가격은 {price}만원 입니다.&#39;&#39;&#39;) . 지역: 서울 매물종류: 아파트 평: 30 방개수: 3 가격: 5 서울에 위치한 아주 좋은 아파트이(가) 매물로 나왔습니다. 이 아파트는 30평으로 3개의 방을 가지고 있습니다. 가격은 5만원 입니다. . leader = input(&#39;이끔이:&#39;) praiser = input(&#39;칭찬이:&#39;) timekeeper = input(&#39;지킴이:&#39;) recorder = input(&#39;기록이:&#39;) print(f&#39;&#39;&#39;오월의 오팀 이끔이는 {leader}님입니다. 칭찬이는 {praiser}이고, 지킴이는 {timekeeper}님입니다. 마지막으로 기록이는 {recorder}님입니다.&#39;&#39;&#39;) . 이끔이:신동열 칭찬이:노현정, 박제희, 김은수 지킴이:이영이, 박정선 기록이:한슬기 오월의 오팀 이끔이는 신동열님입니다. 칭찬이는 노현정, 박제희, 김은수이고, 지킴이는 이영이, 박정선님입니다. 마지막으로 기록이는 한슬기님입니다. . name = input(&#39;이름을 입력하세요:&#39;) kor = int(input(&#39;국어 성적을 입력하세요:&#39;)) eng = int(input(&#39;영어성적을 입력하세요:&#39;)) math = int(input(&#39;수학성적을 입력하세요:&#39;)) print(&#39;-&#39;*50) print(&#39;평균성적은&#39;, (kor+eng+math)/3, &#39;점입니다&#39;) . 이름을 입력하세요:파이썬 국어 성적을 입력하세요:90 영어성적을 입력하세요:90 수학성적을 입력하세요:97 -- 평균성적은 92.33333333333333 점입니다 . ame = int(input(&#39;아메리카노 판매 갯수:&#39;)) latte = int(input(&#39;카페라떼 판매 갯수:&#39;)) cappu = int(input(&#39;카푸치노 판매 갯수:&#39;)) a = 2000 l = 3000 c= 3500 print(&#39;총 매출은&#39;, (ame*a+latte*l+cappu*c),&#39;원입니다.&#39;) . 아메리카노 판매 갯수:10 카페라떼 판매 갯수:20 카푸치노 판매 갯수:30 총 매출은 185000 원입니다. . &#47928;&#51088;&#50676; &#53945;&#49688;&#53412; &amp; &#48512;&#44032;&#51201;&#51064; &#54632;&#49688; . print( &#39;셀 병합 n t &#39;shift key &#39;를 누른후 n t t병합을 원하는 셀들을 다중선택 후 shift+M&#39;) . 셀 병합 &#39;shift key&#39;를 누른후 병합을 원하는 셀들을 다중선택 후 shift+M . #split : 문자열을 원하는 글자로 나눈다 print(&#39;-&#39;.join(&#39;Hello World&#39;)) print(&#39;Welcome to python&#39;.split(&#39; &#39;)) #Error 이유: 쉼표 말고 마침표!!! . H-e-l-l-o- -W-o-r-l-d [&#39;Welcome&#39;, &#39;to&#39;, &#39;python&#39;] . print(&#39;-&#39;.join(&#39;Hello World&#39;)) print(&#39;Welcome to python&#39;.split(&#39;o&#39;)) . H-e-l-l-o- -W-o-r-l-d [&#39;Welc&#39;, &#39;me t&#39;, &#39; pyth&#39;, &#39;n&#39;] .",
            "url": "https://jungsun17.github.io/pythonrepo/2021/06/07/_05_25_5%ED%8C%80_%EB%B0%95%EC%A0%95%EC%84%A0.html",
            "relUrl": "/2021/06/07/_05_25_5%ED%8C%80_%EB%B0%95%EC%A0%95%EC%84%A0.html",
            "date": " • Jun 7, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "파이썬 기초",
            "content": ". 안녕하세요 . NameError Traceback (most recent call last) &lt;ipython-input-1-041a565a82b3&gt; in &lt;module&gt;() -&gt; 1 안녕하세요 NameError: name &#39;안녕하세요&#39; is not defined . print(&quot;안녕&quot;) . 안녕 . a=5 b= 3.14 c=&#39;3.14&#39; d=&quot;3.14&quot; e = -3.14 f=&#39;abcd&#39;+&#39;가나다라&#39; g=&#39;123&#39;*3 print(type(a),type(b),type(c),type(d),type(e),type(f),type(g)) . &lt;class &#39;int&#39;&gt; &lt;class &#39;float&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;float&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;str&#39;&gt; . &#54028;&#51060;&#50028; &#48320;&#49688;&#47749; &#51089;&#49457;&#48277; . 1) 첫 글자 = 영문 혹은 _ (언더바) . 2) 영문자, 숫자, _(언더바)만으로 구성 . 3) 대소문자를 구별해서 사용 . 4) 예약어는 변수명으로 사용 불가 . 1st = &#39;첫번째&#39; . File &#34;&lt;ipython-input-6-447ef88e7929&gt;&#34;, line 2 1st = &#39;첫번째&#39; ^ SyntaxError: invalid syntax . f**t = &#39;첫번째&#39; . File &#34;&lt;ipython-input-5-191f3b30443a&gt;&#34;, line 2 f**t = &#39;첫번째&#39; ^ SyntaxError: can&#39;t assign to operator . f^st = &#39;첫번째&#39; . File &#34;&lt;ipython-input-7-432c288619dd&gt;&#34;, line 2 f^st = &#39;첫번째&#39; ^ SyntaxError: can&#39;t assign to operator . Temp = 1000 print(temp) . NameError Traceback (most recent call last) &lt;ipython-input-8-443e264812be&gt; in &lt;module&gt;() 1 # 변수명 에러 유형 (대소문자 구분) 2 Temp = 1000 -&gt; 3 print(temp) NameError: name &#39;temp&#39; is not defined . print = &#39;출력합니다&#39; print(print) . TypeError Traceback (most recent call last) &lt;ipython-input-9-25dae06f115c&gt; in &lt;module&gt;() 1 # 변수명 에러 유형 (예약어 변수명으로 사용 금지) 2 print = &#39;출력합니다&#39; -&gt; 3 print(print) TypeError: &#39;str&#39; object is not callable . &#48320;&#49688; &#49324;&#50857; . 변수는 변하는 수 . | 계산 결과, 입력값, 출력값에 사용 . | . print(100+200) print(&quot;Hello World!&quot;) print(&#39;안녕&#39;) &#39;부에노스 디아스&#39; . 300 Hello World! 안녕 . &#39;부에노스 디아스&#39; . temp =100 #temp라는 변수를 만들고 temp공간에 100을 넣는다는 의미 temp #temp값을 확인하겠다는 의미. 코랩 외의 환경에서는 print(temp) . 100 . temp2 = 200 print(temp2) . 200 . temp3 = temp+temp2 #temp3에 temp의 값과 temp2의 값을 더한 새로운 값 temp3 . 300 . &#54028;&#51060;&#50028; &#53440;&#51077; &#54869;&#51064; . type() 함수를 사용해 변수의 타입을 확인할 수 있다. . . Types: . 숫자형 (Number) | 문자열 (String) | 참, 거짓 (Boolean) | 리스트 (List) | 튜플 (Tuple) | 딕셔너리 (Dictionary) | 집합형 (Set) | . str4 = &#39;100&#39; type(str4) . str . type(int) . type . &#54028;&#51060;&#50028; &#47532;&#49828;&#53944; . name = &#39;BlockDMask&#39; phone = &#39;010 xxxx xxxx&#39; #띄어쓰기 포함해서 13; 띄어쓰기 없으면 11 address = &#39;korea&#39; print(len(name)) #len() 함수는 매개변수로 들어온 문자열의 길이를 반환한다 print(len(phone)) print(len(address)) . 10 13 5 . list1 = [1,2,3,4,5,6,7,8,9,10] print(list1) . [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] . len(list1) #list1 배열 원소값을 요청 #len은 문자열의 길이도 구할 수 있다 . 10 . list1 = [1,2,3,4,5,6,7,8,9,10] print(list1[0]) #list1배열의 첫번째 원소값을 출력 print(list1[-1]) #list1배열의 마지막 원소값을 출력 #list1배열의 마지막 원소값을 문자열과 함께 출력 print(&#39;list1 배열의 마지막 원소값은&#39; + str(list1[-1]) + &#39;입니다&#39;) . 1 10 list1 배열의 마지막 원소값은10입니다 . list1 = [1,2,3,4,5,6,7,8,9,10] print(list1[0]) print(list1[-1]) print(&#39;list1 배열의 마지막 원소값은&#39;,str(list1[-1]),&#39;입니다&#39;) . 1 10 list1 배열의 마지막 원소값은 10 입니다 . &#49836;&#46972;&#51060;&#49905; . 배열 원소의 일정 부분만 가져오기 . print(list1[2:6]) ## list1배열의 인덱스 2번부터 6번 앞까지의 데이터 출력 요청 . [3, 4, 5, 6] . print(list1[2:]) #list1 배열의 인덱스 2번부터 마지막까지의 데이터 출력 요청 . [3, 4, 5, 6, 7, 8, 9, 10] . print(list1[:6]) ##list1배열의 인덱스 처음부터 인덱스 6번 앞까지의 데이터 출력 요청 . [1, 2, 3, 4, 5, 6] . print(list1[:-1]) #list1 배열의 인덱스 처음부터 마지막 앞까지의 데이터 출력 요청 . [1, 2, 3, 4, 5, 6, 7, 8, 9] . range 사용해서 리스트 만들기 . 리스트 = list(range(횟수)) | 리스트 = list(range(시작,끝)) | 리스트 = list(range(시작,끝,증가폭)) | . list_rg1 = list(range(11)) list_rg2 = list(range(5,12)) list_rg3 = list(range(-4,5,2)) list_rg4 = list(range(20,-1,-1)) list_rg5 = list(&#39;hello world&#39;) print(&quot;list_rg1은&quot;, list_rg1) print(&quot;list_rg2은&quot;, list_rg2) print(&quot;list_rg3은&quot;, list_rg3) print(&quot;list_rg4은&quot;, list_rg4) print(&quot;list_rg5은&quot;, list_rg5) . list_rg1은 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] list_rg2은 [5, 6, 7, 8, 9, 10, 11] list_rg3은 [-4, -2, 0, 2, 4] list_rg4은 [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] list_rg5은 [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] . print(list_rg1) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] . list_rg5 = list(&#39;hello world&#39;) list_rg5[0] = &#39;H&#39; ##인덱스 0 (h) 대문자로 수정 print(&quot;list_rg5은&quot;, list_rg5) . list_rg5은 [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] . list_rg5 = list(&#39;hello world&#39;) list_rg5[0] = &#39;H&#39; del list_rg5[5] print(&quot;list_rg5의 8번째 요소 대문자로 수정&quot;, list_rg5) print(&quot;list_rg5의 5번째 요소 삭제&quot;, list_rg5) . list_rg5의 8번째 요소 대문자로 수정 [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] list_rg5의 5번째 요소 삭제 [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] . del list_rg5[5] print(&quot;list_rg5의 5번째 요소 삭제&quot;, list_rg5) . list_rg5의 5번째 요소 삭제 [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] . &#54028;&#51060;&#50028; &#48152;&#48373;&#47928; . for문 기본 형식 . for x in range(0,3,1): ##(시작값,끝값+1,증가값) print(&#39;안녕하세요 for문을 공부중 입니다&#39;) . 안녕하세요 for문을 공부중 입니다 안녕하세요 for문을 공부중 입니다 안녕하세요 for문을 공부중 입니다 . for x in range(5): print(x) ## 실수했던 곳! tap 무조건 누르기 . 0 1 2 3 4 . for x in range(2,4): print(x) . 2 3 . for x in range(0,10): print(x) . 0 1 2 3 4 5 6 7 8 9 . &#50696;&#51228; . Example: 합계구하기 . 변수는 3개를 사용합니다 (합계 = 0, 범위 시작값 =1, 끝값 = 11). . 시작값에서 끝값-1까지 인덱스 값을 바꾸면서 반복합니다. . 합계값에 인덱스 값을 더합니다. . 반복이 끝나면 ‘-’ 값을 50번 출력합니다. . 합계와 인덱스 값을 출력합니다. . sum = 0 ## 합계 start = 1 ## 시작값 final = 11 ## 끝값 for x in range (start, final): ## 실수!!! 콜론 붙이기 sum+=x ##합계값에 인덱스값을 더합니다 (sum = sum + x) print (&quot;x:&quot;,x,&quot;sum:&quot;,sum) ## 합계와 인덱스 값을 출력합니다 print(&#39;-&#39;*50) ## 반복이 끝나면 &#39;-&#39;값을 50번 출력합니다 print(start, &#39;부터&#39;, final-1, &#39;까지 더한 총합은&#39;, sum,&#39;입니다&#39;) ##final-1인 이유는 &#39;시작값에서 끝값-1까지 인덱스 값을 바꾸면서 반복합니다&#39; 라고 명시되어 있기 떄문 . x: 10 sum: 55 -- 1 부터 10 까지 더한 총합은 55 입니다 . test_sum = 0 a = 1 b = 11 for x in range (a,b): test_sum += x print (&quot;x:&quot;,x,&quot;sum:&quot;,test_sum) print(&#39;-&#39;* 50) print(a,&#39;부터&#39;,b-1,&#39;까지 더한 총합은&#39;,test_sum, &#39;입니다&#39;) . x: 10 sum: 55 -- 1 부터 10 까지 더한 총합은 55 입니다 . &#54028;&#51060;&#50028; &#51312;&#44148;&#47928; . if &amp; else . a = 200 if a &lt; 100: print(&quot;100보다 작군요&quot;) else: print(&quot;100보다 크군요&quot;) . 100보다 크군요 . import random . 무작위 수를 발생시키는 모듈 . import random for x in range(3): test_num1 = random.randint(1,15) if test_num1 &gt; 10: print(test_num1 , &#39;은 10보다 큽니다&#39;) else: print(test_num1 , &#39;은 10보다 작거나 같습니다&#39;) . 14 은 10보다 큽니다 11 은 10보다 큽니다 10 은 10보다 작거나 같습니다 . import random L = [&quot;열&quot;, &quot;수&quot;, &quot;이&quot;, &quot;선&quot;, &quot;기&quot;, &quot;정&quot;, &quot;희&quot;] x = random.randint(0,6) print(L[x],&#39;는/은 발표를 합니다&#39;) . 희 는/은 발표를 합니다 . import random list = [&quot;선&quot;, &quot;희&quot;, &quot;열&quot;, &quot;이&quot;, &quot;수&quot;, &quot;정&quot;, &quot;기&quot;] random_num = random.randint(0,6) print(list[random_num],&quot;는 발표자입니다&quot;) . 희 는 발표자입니다 . import random list_DT = [&quot;종엽&quot;,&quot;지순&quot;,&quot;승아&quot;,&quot;윤희&quot;,&quot;동빈&quot;,&quot;유진&quot;,&quot;찬민&quot;] rand_num = random.randint(0,6) print(&quot;발표자는 &quot;+list_DT[rand_num]+&quot;입니다&quot;) . 발표자는 종엽입니다 . import random list=[&#39;강다솔&#39;, &#39;김보연&#39;, &#39;남지인&#39;, &#39;유승한&#39;, &#39;윤혜선&#39;, &#39;이예빈&#39;] x=random.randint(0, len(list)-1) print(list[x]) . 유승한 . from random import sample list_member=[&#39;Alex&#39;,&#39;Sophie&#39;,&#39;Annie&#39;,&#39;Zoey&#39;,&#39;Sunny&#39;,&#39;Paul&#39;] print(&#39;발표자는&#39;, sample(list_member,2),&#39;입니다&#39;) . 발표자는 [&#39;Annie&#39;, &#39;Alex&#39;] 입니다 .",
            "url": "https://jungsun17.github.io/pythonrepo/2021/06/07/_05_24_5%ED%8C%80_%EB%B0%95%EC%A0%95%EC%84%A0.html",
            "relUrl": "/2021/06/07/_05_24_5%ED%8C%80_%EB%B0%95%EC%A0%95%EC%84%A0.html",
            "date": " • Jun 7, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jungsun17.github.io/pythonrepo/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jungsun17.github.io/pythonrepo/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages [^1]. . #DT Python .",
          "url": "https://jungsun17.github.io/pythonrepo/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jungsun17.github.io/pythonrepo/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}